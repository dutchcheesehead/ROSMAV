/* auto-generated by gensrv_cpp from /home/snpucci/ros/brown-ros-pkg/experimental/pr2develop/joint_states_listener/srv/ReturnJointStates.srv.  Do not edit! */
#ifndef SRV_JOINT_STATES_LISTENER_RETURNJOINTSTATES_H
#define SRV_JOINT_STATES_LISTENER_RETURNJOINTSTATES_H

#include <string>
#include <cstring>
#include <vector>
#include <map>
#include "ros/message.h"
#include "ros/time.h"

namespace joint_states_listener
{

struct ReturnJointStates
{

inline static std::string getDataType() { return "joint_states_listener/ReturnJointStates"; }
inline static std::string getMD5Sum() { return "ce9bd2b56c904b190a782a08482fb4e9"; }

//! \htmlinclude Request.msg.html

class Request : public ros::Message
{
public:
  typedef boost::shared_ptr<Request> Ptr;
  typedef boost::shared_ptr<Request const> ConstPtr;

  typedef std::vector<std::string> _name_type;

  std::vector<std::string> name;

  Request() : ros::Message()
  {
  }
  Request(const Request &copy) : ros::Message()
  {
    (void)copy;
    name = copy.name;
  }
  Request &operator =(const Request &copy)
  {
    if (this == &copy)
      return *this;
    name.clear();
    name = copy.name;
    return *this;
  }
  virtual ~Request() 
  {
    name.clear();
  }
  inline static std::string __s_getDataType() { return std::string("joint_states_listener/ReturnJointStatesRequest"); }
  inline static std::string __s_getMD5Sum() { return std::string(""); }
  inline static std::string __s_getMessageDefinition()
  {
    return std::string(
    "string[] name\n"
    "\n"
    );
  }
  inline virtual const std::string __getDataType() const { return __s_getDataType(); }
  inline virtual const std::string __getMD5Sum() const { return __s_getMD5Sum(); }
  inline virtual const std::string __getMessageDefinition() const { return __s_getMessageDefinition(); }
  inline static std::string __s_getServerMD5Sum() { return std::string("ce9bd2b56c904b190a782a08482fb4e9"); }
  inline virtual const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum(); }
  inline static std::string __s_getServiceDataType() { return std::string("joint_states_listener/ReturnJointStates"); }
  inline virtual const std::string __getServiceDataType() const { return __s_getServiceDataType(); }
  void set_name_size(uint32_t __ros_new_size)
  {
    this->name.resize(__ros_new_size);
  }
  inline uint32_t get_name_size() const { return name.size(); }
  uint32_t calc_name_array_serialization_len() const
  {
    uint32_t l = 0;
    uint32_t name_size = name.size();
    for (size_t i = 0; i < name_size; i++)
      l += 4 + name[i].length();
    return l;
  }
  inline void get_name_vec (std::vector<std::string> &__ros_vec) const
  {
    __ros_vec = this->name;
  }
  inline void set_name_vec(const std::vector<std::string> &__ros_vec)
  {
    this->name = __ros_vec;
  }
  inline uint32_t serializationLength() const
  {
    unsigned __l = 0;
    __l += 4 + calc_name_array_serialization_len(); // name
    return __l;
  }
  virtual uint8_t *serialize(uint8_t *write_ptr,
#if defined(__GNUC__)
                             __attribute__((unused)) uint32_t seq) const
#else
                             uint32_t seq) const
#endif
  {
    uint32_t __name_size = name.size();
    SROS_SERIALIZE_PRIMITIVE(write_ptr, __name_size);
    for (size_t i = 0; i < __name_size; i++)
    {
      unsigned __ros_name_i__len = name[i].length();
    SROS_SERIALIZE_PRIMITIVE(write_ptr, __ros_name_i__len);
    SROS_SERIALIZE_BUFFER(write_ptr, name[i].c_str(), __ros_name_i__len);
    }
    return write_ptr;
  }
  virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    uint32_t __name_size;
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, __name_size);
    set_name_size(__name_size);
    for (size_t i = 0; i < __name_size; i++)
    {
      unsigned __ros_name_i__len;
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, __ros_name_i__len);
    name[i] = std::string((const char *)read_ptr, __ros_name_i__len);
    read_ptr += __ros_name_i__len;
    }
    return read_ptr;
  }
};

typedef boost::shared_ptr<Request> RequestPtr;
typedef boost::shared_ptr<Request const> RequestConstPtr;

//! \htmlinclude Response.msg.html

class Response : public ros::Message
{
public:
  typedef boost::shared_ptr<Response> Ptr;
  typedef boost::shared_ptr<Response const> ConstPtr;

  typedef std::vector<uint32_t> _found_type;
  typedef std::vector<double> _position_type;
  typedef std::vector<double> _velocity_type;
  typedef std::vector<double> _effort_type;

  std::vector<uint32_t> found;
  std::vector<double> position;
  std::vector<double> velocity;
  std::vector<double> effort;

  Response() : ros::Message()
  {
  }
  Response(const Response &copy) : ros::Message()
  {
    (void)copy;
    found = copy.found;
    position = copy.position;
    velocity = copy.velocity;
    effort = copy.effort;
  }
  Response &operator =(const Response &copy)
  {
    if (this == &copy)
      return *this;
    found.clear();
    position.clear();
    velocity.clear();
    effort.clear();
    found = copy.found;
    position = copy.position;
    velocity = copy.velocity;
    effort = copy.effort;
    return *this;
  }
  virtual ~Response() 
  {
    found.clear();
    position.clear();
    velocity.clear();
    effort.clear();
  }
  inline static std::string __s_getDataType() { return std::string("joint_states_listener/ReturnJointStatesResponse"); }
  inline static std::string __s_getMD5Sum() { return std::string(""); }
  inline static std::string __s_getMessageDefinition()
  {
    return std::string(
    "uint32[] found\n"
    "float64[] position\n"
    "float64[] velocity\n"
    "float64[] effort\n"
    "\n"
    "\n"
    );
  }
  inline virtual const std::string __getDataType() const { return __s_getDataType(); }
  inline virtual const std::string __getMD5Sum() const { return __s_getMD5Sum(); }
  inline virtual const std::string __getMessageDefinition() const { return __s_getMessageDefinition(); }
  inline static std::string __s_getServerMD5Sum() { return std::string("ce9bd2b56c904b190a782a08482fb4e9"); }
  inline virtual const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum(); }
  inline static std::string __s_getServiceDataType() { return std::string("joint_states_listener/ReturnJointStates"); }
  inline virtual const std::string __getServiceDataType() const { return __s_getServiceDataType(); }
  void set_found_size(uint32_t __ros_new_size)
  {
    this->found.resize(__ros_new_size);
  }
  inline uint32_t get_found_size() const { return found.size(); }
  inline void get_found_vec (std::vector<uint32_t> &__ros_vec) const
  {
    __ros_vec = this->found;
  }
  inline void set_found_vec(const std::vector<uint32_t> &__ros_vec)
  {
    this->found = __ros_vec;
  }
  void set_position_size(uint32_t __ros_new_size)
  {
    this->position.resize(__ros_new_size);
  }
  inline uint32_t get_position_size() const { return position.size(); }
  inline void get_position_vec (std::vector<double> &__ros_vec) const
  {
    __ros_vec = this->position;
  }
  inline void set_position_vec(const std::vector<double> &__ros_vec)
  {
    this->position = __ros_vec;
  }
  void set_velocity_size(uint32_t __ros_new_size)
  {
    this->velocity.resize(__ros_new_size);
  }
  inline uint32_t get_velocity_size() const { return velocity.size(); }
  inline void get_velocity_vec (std::vector<double> &__ros_vec) const
  {
    __ros_vec = this->velocity;
  }
  inline void set_velocity_vec(const std::vector<double> &__ros_vec)
  {
    this->velocity = __ros_vec;
  }
  void set_effort_size(uint32_t __ros_new_size)
  {
    this->effort.resize(__ros_new_size);
  }
  inline uint32_t get_effort_size() const { return effort.size(); }
  inline void get_effort_vec (std::vector<double> &__ros_vec) const
  {
    __ros_vec = this->effort;
  }
  inline void set_effort_vec(const std::vector<double> &__ros_vec)
  {
    this->effort = __ros_vec;
  }
  inline uint32_t serializationLength() const
  {
    unsigned __l = 0;
    __l += 4 + (found.size() ? found.size() * 4 : 0); // found
    __l += 4 + (position.size() ? position.size() * 8 : 0); // position
    __l += 4 + (velocity.size() ? velocity.size() * 8 : 0); // velocity
    __l += 4 + (effort.size() ? effort.size() * 8 : 0); // effort
    return __l;
  }
  virtual uint8_t *serialize(uint8_t *write_ptr,
#if defined(__GNUC__)
                             __attribute__((unused)) uint32_t seq) const
#else
                             uint32_t seq) const
#endif
  {
    uint32_t __found_size = found.size();
    SROS_SERIALIZE_PRIMITIVE(write_ptr, __found_size);
    memcpy(write_ptr, &found[0], sizeof(uint32_t) * __found_size);
    write_ptr += sizeof(uint32_t) * __found_size;
    uint32_t __position_size = position.size();
    SROS_SERIALIZE_PRIMITIVE(write_ptr, __position_size);
    memcpy(write_ptr, &position[0], sizeof(double) * __position_size);
    write_ptr += sizeof(double) * __position_size;
    uint32_t __velocity_size = velocity.size();
    SROS_SERIALIZE_PRIMITIVE(write_ptr, __velocity_size);
    memcpy(write_ptr, &velocity[0], sizeof(double) * __velocity_size);
    write_ptr += sizeof(double) * __velocity_size;
    uint32_t __effort_size = effort.size();
    SROS_SERIALIZE_PRIMITIVE(write_ptr, __effort_size);
    memcpy(write_ptr, &effort[0], sizeof(double) * __effort_size);
    write_ptr += sizeof(double) * __effort_size;
    return write_ptr;
  }
  virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    uint32_t __found_size;
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, __found_size);
    set_found_size(__found_size);
    memcpy(&found[0], read_ptr, sizeof(uint32_t) * __found_size);
    read_ptr += sizeof(uint32_t) * __found_size;
    uint32_t __position_size;
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, __position_size);
    set_position_size(__position_size);
    memcpy(&position[0], read_ptr, sizeof(double) * __position_size);
    read_ptr += sizeof(double) * __position_size;
    uint32_t __velocity_size;
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, __velocity_size);
    set_velocity_size(__velocity_size);
    memcpy(&velocity[0], read_ptr, sizeof(double) * __velocity_size);
    read_ptr += sizeof(double) * __velocity_size;
    uint32_t __effort_size;
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, __effort_size);
    set_effort_size(__effort_size);
    memcpy(&effort[0], read_ptr, sizeof(double) * __effort_size);
    read_ptr += sizeof(double) * __effort_size;
    return read_ptr;
  }
};

typedef boost::shared_ptr<Response> ResponsePtr;
typedef boost::shared_ptr<Response const> ResponseConstPtr;

Request request;
Response response;

};

}

#endif
