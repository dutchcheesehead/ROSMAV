# autogenerated by genmsg_py from ArmVelocities.msg. Do not edit.
import roslib.message
import struct


class ArmVelocities(roslib.message.Message):
  _md5sum = "935b1cb56f4c1883937219b0b71d2ca7"
  _type = "PR2JointController/ArmVelocities"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 upper_arm_roll_joint_effort
float32 shoulder_pan_joint_effort
float32 shoulder_lift_joint_effort
float32 forearm_roll_joint_effort
float32 elbow_flex_joint_effort
float32 wrist_flex_joint_effort
float32 wrist_roll_joint_effort


"""
  __slots__ = ['upper_arm_roll_joint_effort','shoulder_pan_joint_effort','shoulder_lift_joint_effort','forearm_roll_joint_effort','elbow_flex_joint_effort','wrist_flex_joint_effort','wrist_roll_joint_effort']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32']

  ## Constructor. Any message fields that are implicitly/explicitly
  ## set to None will be assigned a default value. The recommend
  ## use is keyword arguments as this is more robust to future message
  ## changes.  You cannot mix in-order arguments and keyword arguments.
  ##
  ## The available fields are:
  ##   upper_arm_roll_joint_effort,shoulder_pan_joint_effort,shoulder_lift_joint_effort,forearm_roll_joint_effort,elbow_flex_joint_effort,wrist_flex_joint_effort,wrist_roll_joint_effort
  ##
  ## @param self: self
  ## @param args: complete set of field values, in .msg order
  ## @param kwds: use keyword arguments corresponding to message field names
  ## to set specific fields. 
  def __init__(self, *args, **kwds):
    super(ArmVelocities, self).__init__(*args, **kwds)
    #message fields cannot be None, assign default values for those that are
    if self.upper_arm_roll_joint_effort is None:
      self.upper_arm_roll_joint_effort = 0.
    if self.shoulder_pan_joint_effort is None:
      self.shoulder_pan_joint_effort = 0.
    if self.shoulder_lift_joint_effort is None:
      self.shoulder_lift_joint_effort = 0.
    if self.forearm_roll_joint_effort is None:
      self.forearm_roll_joint_effort = 0.
    if self.elbow_flex_joint_effort is None:
      self.elbow_flex_joint_effort = 0.
    if self.wrist_flex_joint_effort is None:
      self.wrist_flex_joint_effort = 0.
    if self.wrist_roll_joint_effort is None:
      self.wrist_roll_joint_effort = 0.

  ## internal API method
  ## @param self: self
  def _get_types(self): return ArmVelocities._slot_types

  ## serialize message into buffer
  ## @param self: self
  ## @param buff StringIO: buffer
  def serialize(self, buff):
    try:
      buff.write(struct.pack('<7f', self.upper_arm_roll_joint_effort, self.shoulder_pan_joint_effort, self.shoulder_lift_joint_effort, self.forearm_roll_joint_effort, self.elbow_flex_joint_effort, self.wrist_flex_joint_effort, self.wrist_roll_joint_effort))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance
  ## @param self: self
  ## @param str str: byte array of serialized message
  def deserialize(self, str):
    try:
      end = 0
      start = end
      end += 28
      (self.upper_arm_roll_joint_effort, self.shoulder_pan_joint_effort, self.shoulder_lift_joint_effort, self.forearm_roll_joint_effort, self.elbow_flex_joint_effort, self.wrist_flex_joint_effort, self.wrist_roll_joint_effort,) = struct.unpack('<7f',str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  ## serialize message with numpy array types into buffer
  ## @param self: self
  ## @param buff StringIO: buffer
  ## @param numpy module: numpy python module
  def serialize_numpy(self, buff, numpy):
    try:
      buff.write(struct.pack('<7f', self.upper_arm_roll_joint_effort, self.shoulder_pan_joint_effort, self.shoulder_lift_joint_effort, self.forearm_roll_joint_effort, self.elbow_flex_joint_effort, self.wrist_flex_joint_effort, self.wrist_roll_joint_effort))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance using numpy for array types
  ## @param self: self
  ## @param str str: byte array of serialized message
  ## @param numpy module: numpy python module
  def deserialize_numpy(self, str, numpy):
    try:
      end = 0
      start = end
      end += 28
      (self.upper_arm_roll_joint_effort, self.shoulder_pan_joint_effort, self.shoulder_lift_joint_effort, self.forearm_roll_joint_effort, self.elbow_flex_joint_effort, self.wrist_flex_joint_effort, self.wrist_roll_joint_effort,) = struct.unpack('<7f',str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

