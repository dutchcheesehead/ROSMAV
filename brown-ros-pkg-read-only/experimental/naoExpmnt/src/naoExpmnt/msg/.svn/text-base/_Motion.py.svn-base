# autogenerated by genmsg_py from Motion.msg. Do not edit.
import roslib.message
import struct

## \htmlinclude Motion.msg.html

class Motion(roslib.message.Message):
  _md5sum = "610c37bd2a189fd95f9d3aad2177aef9"
  _type = "naoExpmnt/Motion"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 forward
uint8 left
uint8 right
uint8 stand

"""
  __slots__ = ['forward','left','right','stand']
  _slot_types = ['uint8','uint8','uint8','uint8']

  ## Constructor. Any message fields that are implicitly/explicitly
  ## set to None will be assigned a default value. The recommend
  ## use is keyword arguments as this is more robust to future message
  ## changes.  You cannot mix in-order arguments and keyword arguments.
  ##
  ## The available fields are:
  ##   forward,left,right,stand
  ##
  ## @param args: complete set of field values, in .msg order
  ## @param kwds: use keyword arguments corresponding to message field names
  ## to set specific fields. 
  def __init__(self, *args, **kwds):
    super(Motion, self).__init__(*args, **kwds)
    #message fields cannot be None, assign default values for those that are
    if self.forward is None:
      self.forward = 0
    if self.left is None:
      self.left = 0
    if self.right is None:
      self.right = 0
    if self.stand is None:
      self.stand = 0

  ## internal API method
  def _get_types(self): return Motion._slot_types

  ## serialize message into buffer
  ## @param buff StringIO: buffer
  def serialize(self, buff):
    try:
      buff.write(struct.pack('<4B', self.forward, self.left, self.right, self.stand))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance
  ## @param str str: byte array of serialized message
  def deserialize(self, str):
    try:
      end = 0
      start = end
      end += 4
      (self.forward, self.left, self.right, self.stand,) = struct.unpack('<4B',str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  ## serialize message with numpy array types into buffer
  ## @param buff StringIO: buffer
  ## @param numpy module: numpy python module
  def serialize_numpy(self, buff, numpy):
    try:
      buff.write(struct.pack('<4B', self.forward, self.left, self.right, self.stand))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance using numpy for array types
  ## @param str str: byte array of serialized message
  ## @param numpy module: numpy python module
  def deserialize_numpy(self, str, numpy):
    try:
      end = 0
      start = end
      end += 4
      (self.forward, self.left, self.right, self.stand,) = struct.unpack('<4B',str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

