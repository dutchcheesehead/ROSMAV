# autogenerated by genmsg_py from Head.msg. Do not edit.
import roslib.message
import struct

## \htmlinclude Head.msg.html

class Head(roslib.message.Message):
  _md5sum = "bd7b43fd41d4c47bf5c703cc7d016709"
  _type = "naoExpmnt/Head"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 x
int32 y

"""
  __slots__ = ['x','y']
  _slot_types = ['int32','int32']

  ## Constructor. Any message fields that are implicitly/explicitly
  ## set to None will be assigned a default value. The recommend
  ## use is keyword arguments as this is more robust to future message
  ## changes.  You cannot mix in-order arguments and keyword arguments.
  ##
  ## The available fields are:
  ##   x,y
  ##
  ## @param args: complete set of field values, in .msg order
  ## @param kwds: use keyword arguments corresponding to message field names
  ## to set specific fields. 
  def __init__(self, *args, **kwds):
    super(Head, self).__init__(*args, **kwds)
    #message fields cannot be None, assign default values for those that are
    if self.x is None:
      self.x = 0
    if self.y is None:
      self.y = 0

  ## internal API method
  def _get_types(self): return Head._slot_types

  ## serialize message into buffer
  ## @param buff StringIO: buffer
  def serialize(self, buff):
    try:
      buff.write(struct.pack('<2i', self.x, self.y))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance
  ## @param str str: byte array of serialized message
  def deserialize(self, str):
    try:
      end = 0
      start = end
      end += 8
      (self.x, self.y,) = struct.unpack('<2i',str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  ## serialize message with numpy array types into buffer
  ## @param buff StringIO: buffer
  ## @param numpy module: numpy python module
  def serialize_numpy(self, buff, numpy):
    try:
      buff.write(struct.pack('<2i', self.x, self.y))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance using numpy for array types
  ## @param str str: byte array of serialized message
  ## @param numpy module: numpy python module
  def deserialize_numpy(self, str, numpy):
    try:
      end = 0
      start = end
      end += 8
      (self.x, self.y,) = struct.unpack('<2i',str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

