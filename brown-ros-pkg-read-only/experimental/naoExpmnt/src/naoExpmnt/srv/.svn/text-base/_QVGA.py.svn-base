# autogenerated by genmsg_py from QVGARequest.msg. Do not edit.
import roslib.message
import struct

## \htmlinclude QVGARequest.msg.html

class QVGARequest(roslib.message.Message):
  _md5sum = "2a7ba835abc33bacf5b6ef2bee94a330"
  _type = "naoExpmnt/QVGARequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 ignore

"""
  __slots__ = ['ignore']
  _slot_types = ['int8']

  ## Constructor. Any message fields that are implicitly/explicitly
  ## set to None will be assigned a default value. The recommend
  ## use is keyword arguments as this is more robust to future message
  ## changes.  You cannot mix in-order arguments and keyword arguments.
  ##
  ## The available fields are:
  ##   ignore
  ##
  ## @param args: complete set of field values, in .msg order
  ## @param kwds: use keyword arguments corresponding to message field names
  ## to set specific fields. 
  def __init__(self, *args, **kwds):
    super(QVGARequest, self).__init__(*args, **kwds)
    #message fields cannot be None, assign default values for those that are
    if self.ignore is None:
      self.ignore = 0

  ## internal API method
  def _get_types(self): return QVGARequest._slot_types

  ## serialize message into buffer
  ## @param buff StringIO: buffer
  def serialize(self, buff):
    try:
      buff.write(struct.pack('<b', self.ignore))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance
  ## @param str str: byte array of serialized message
  def deserialize(self, str):
    try:
      end = 0
      start = end
      end += 1
      (self.ignore,) = struct.unpack('<b',str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  ## serialize message with numpy array types into buffer
  ## @param buff StringIO: buffer
  ## @param numpy module: numpy python module
  def serialize_numpy(self, buff, numpy):
    try:
      buff.write(struct.pack('<b', self.ignore))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance using numpy for array types
  ## @param str str: byte array of serialized message
  ## @param numpy module: numpy python module
  def deserialize_numpy(self, str, numpy):
    try:
      end = 0
      start = end
      end += 1
      (self.ignore,) = struct.unpack('<b',str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

# autogenerated by genmsg_py from QVGAResponse.msg. Do not edit.
import roslib.message
import struct

## \htmlinclude QVGAResponse.msg.html

class QVGAResponse(roslib.message.Message):
  _md5sum = "e7e6b45008ab5d519a6e790c6ad1349d"
  _type = "naoExpmnt/QVGAResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8[57600] rgb


"""
  __slots__ = ['rgb']
  _slot_types = ['uint8[57600]']

  ## Constructor. Any message fields that are implicitly/explicitly
  ## set to None will be assigned a default value. The recommend
  ## use is keyword arguments as this is more robust to future message
  ## changes.  You cannot mix in-order arguments and keyword arguments.
  ##
  ## The available fields are:
  ##   rgb
  ##
  ## @param args: complete set of field values, in .msg order
  ## @param kwds: use keyword arguments corresponding to message field names
  ## to set specific fields. 
  def __init__(self, *args, **kwds):
    super(QVGAResponse, self).__init__(*args, **kwds)
    #message fields cannot be None, assign default values for those that are
    if self.rgb is None:
      self.rgb = chr(0)*57600

  ## internal API method
  def _get_types(self): return QVGAResponse._slot_types

  ## serialize message into buffer
  ## @param buff StringIO: buffer
  def serialize(self, buff):
    try:
      #serialize self.rgb
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(self.rgb) in [list, tuple]:
        buff.write(struct.pack('<57600B', *self.rgb))
      else:
        buff.write(struct.pack('<57600s', self.rgb))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance
  ## @param str str: byte array of serialized message
  def deserialize(self, str):
    try:
      end = 0
      #deserialize self.rgb
      pattern = '<57600s'
      start = end
      end += struct.calcsize(pattern)
      (self.rgb,) = struct.unpack(pattern, str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  ## serialize message with numpy array types into buffer
  ## @param buff StringIO: buffer
  ## @param numpy module: numpy python module
  def serialize_numpy(self, buff, numpy):
    try:
      #serialize self.rgb
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(self.rgb) in [list, tuple]:
        buff.write(struct.pack('<57600B', *self.rgb))
      else:
        buff.write(struct.pack('<57600s', self.rgb))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance using numpy for array types
  ## @param str str: byte array of serialized message
  ## @param numpy module: numpy python module
  def deserialize_numpy(self, str, numpy):
    try:
      end = 0
      #deserialize self.rgb
      pattern = '<57600s'
      start = end
      end += struct.calcsize(pattern)
      (self.rgb,) = struct.unpack(pattern, str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

## \htmlinclude QVGA.srv.html

class QVGA(roslib.message.ServiceDefinition):
  _type          = 'naoExpmnt/QVGA'
  _md5sum = '3c50f975e719c485e41d005c36162c51'
  _request_class  = QVGARequest
  _response_class = QVGAResponse
