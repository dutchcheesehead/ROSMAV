<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
            "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
  <title>WebGL example</title>
  <link rel="stylesheet" type="text/css" href="http://yui.yahooapis.com/3.0.0/build/cssreset/reset-context-min.css">
  <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
  <script type="text/javascript" src="https://cvs.khronos.org/svn/repos/registry/trunk/public/webgl/sdk/demos/webkit/resources/CanvasMatrix.js"></script>
  <script type="text/javascript" src="https://cvs.khronos.org/svn/repos/registry/trunk/public/webgl/sdk/demos/webkit/resources/utils3d.js"></script>

<script id="vshader" type="x-shader/x-vertex">
uniform mat4 perspectiveMatrix;
uniform mat4 modelMatrix;

attribute vec4 vPosition;
attribute vec2 vTextureCord;

varying vec3 textureandZ;

void main() {
	vec4 modelPosition = vPosition * modelMatrix;
	textureandZ = vec3(vTextureCord.s, vTextureCord.t, modelPosition.z);
	gl_Position = modelPosition * perspectiveMatrix;
}
</script>

<script id="fshader" type="x-shader/x-fragment">
uniform sampler2D sampler2d;

varying vec3 textureandZ;

void main() {
	gl_FragColor = texture2D(sampler2d, vec2(textureandZ.s, textureandZ.t)) / (1.0 - textureandZ.z);
}
</script>


  <script type="text/javascript">
	var count = 0;
  	function log(msg) {
		count += 1;
		$("#smpStatusContent").html($("#smpStatusContent").html() + 
			(($("#smpStatusContent").html() == "") ? "" : "<br/>")  
			+ count + ": " + msg);
	}

	function clearLog() {
		$("#smpStatusContent").html('');
	}

	var gl;

  	$(function() {
		window.console = function() {};
		window.console.log = log;
		log("******start logging******");

		gl = initWebGL("smpCanvas","vshader","fshader",["vPosition","vTextureCord"],[1,1,1,1],10);
		log("gl: " + gl);

		gl.viewport(0,20,$("#smpCanvas").width(),$("#smpCanvas").height());
		log("viewport set");

		gl.enable(gl.TEXTURE_2D);
		log("enable textures");

		var vertices = new WebGLFloatArray(
		//        x     y    z    s    t
		       [	
			-0.2,  0.5, 0.0, 0.3, 0.0,
			 0.2,  0.5, 0.0, 0.7, 0.0,
			 0.5,  0.2, 0.0, 1.0, 0.3,
			 0.5, -0.2, 0.0, 1.0, 0.7,
			 0.2, -0.5, 0.0, 0.7, 1.0,
			-0.2, -0.5, 0.0, 0.3, 1.0,
			-0.5, -0.2, 0.0, 0.0, 0.7,
			-0.5,  0.2, 0.0, 0.0, 0.3,
			 0.0,  0.0, 0.0, 0.5, 0.5,
		       ]

		);
		log("vertices defined");

		var indices = new WebGLUnsignedByteArray(
			[0, 1, 8, 1, 2, 8, 3, 4, 8, 5, 6, 8, 7, 0, 8]
		);
		log("indices defined");

		var buffers = [];
		buffers[0] = gl.createBuffer();
		buffers[1] = gl.createBuffer();
		log("buffers allocated");

		gl.bindBuffer(gl.ARRAY_BUFFER, buffers[0]);
		log("vertices buffer bound");

		gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
		log("vertices data loaded");

		gl.enableVertexAttribArray(0);
		log("vertex attribute for vertices enabled");

		gl.enableVertexAttribArray(1);
		log("vertex attribute for textures enabled");

		gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 5*gl.sizeInBytes(gl.FLOAT), 0);
		log("linked vertex buffer data");

		gl.vertexAttribPointer(1, 2, gl.FLOAT, false, 5*gl.sizeInBytes(gl.FLOAT), 3*gl.sizeInBytes(gl.FLOAT));
		log("linked texture buffer data");

		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers[1]);
		log("indices buffer bound");

		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
		log("indices data loaded");

		var perspectiveMatrix = new CanvasMatrix4();
		perspectiveMatrix.makeIdentity();
		log("perspective matrix created");

		perspectiveMatrix.lookat(0.0,0.0,3.0,
					 0.0,0.0,-1.0,
					 0.0,1.0,0.0);
		log("positioning and orienting perspective");

		perspectiveMatrix.perspective(30, $("#smpCanvas").width()/$("#smpCanvas").height(), 1, 1000);
		log("creating perspective");

		gl.uniformMatrix4fv(gl.getUniformLocation(gl.program, "perspectiveMatrix"), false, perspectiveMatrix.getAsWebGLFloatArray());
		log("perspective matrix attached to uniform");

		var modelMatrix = new CanvasMatrix4();
		modelMatrix.makeIdentity();
		log("model matrix created");

		modelMatrix.scale(1.25, 1.25, 1.0);
		log("scaling model");

		gl.uniformMatrix4fv(gl.getUniformLocation(gl.program, "modelMatrix"), false, modelMatrix.getAsWebGLFloatArray());
		log("model matrix attached to uniform");

		gl.uniform1i(gl.getUniformLocation(gl.program, "sampler2d"), 0);
		log("attached texture to uniform");

		var texture = gl.createTexture();
		texture.image = new Image();
		texture.image.onload = function() {
			gl.bindTexture(gl.TEXTURE_2D, texture);
			log("binding texture");

			gl.texImage2D(gl.TEXTURE_2D, 0, texture.image);
			log("loading texture data");

			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
			log("setting mag filter to linear");
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
			log("setting min filter to linear");
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
			log("clamping in the s direction");
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
			log("clamping in the t direction");

			gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
			log("clearing");

			gl.drawElements(gl.TRIANGLE_STRIP, indices.length, gl.UNSIGNED_BYTE, 0);
			log("drawing");

			gl.flush();
			log("flushing");

			log("******end logging******");

			var angle = 0;
			var modelMatrixLoc = gl.getUniformLocation(gl.program, "modelMatrix");

			setInterval(function() {
				angle -= 2.0;
				if (angle < 0.0) {
					angle = 360.0;
				}
				modelMatrix.makeIdentity();
				modelMatrix.scale(1.25, 1.25, 1.0);
				modelMatrix.rotate(angle, 0.0, 1.0, 0.0);
				gl.uniformMatrix4fv(modelMatrixLoc, false, modelMatrix.getAsWebGLFloatArray());

				gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
				gl.drawElements(gl.TRIANGLE_STRIP, indices.length, gl.UNSIGNED_BYTE, 0);
				gl.flush();
			}, 60);
		}

		texture.image.src = "http://upload.wikimedia.org/wikipedia/en/thumb/f/f3/OCP_logo.svg/98px-OCP_logo.svg.png";
		log("retreiving texture");

	});
  </script>

  <style>
canvas {
	border: solid 2px black;
}

#smpStatus {
	-moz-column-width: 350px;
	-webkit-column-width: 350px;
}

#canvasContainter {
	position: relative;
	width: 320px; 
	height: 240px;
	margin-bottom: 20px;
}

#canvasBlurb {
	font-weight: bold;
	font-family: sans-serif;
	font-size: 40px;
	position: absolute;
	bottom: -5px;
	width: 320px;
}
  </style>

</head>
<body>
  <center>
    <div id="canvasContainter">
      <canvas id="smpCanvas" width="320" height="240"></canvas>
      <div id="canvasBlurb">OCP</div>
      </div>
    </center>
   <div id="smpStatus"><div id="smpStatusContent"></div></div>
</body>
</html>
