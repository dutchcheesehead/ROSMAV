/* Auto-generated by genmsg_cpp for file /home/sarah/ros/joint_state_publisher/srv/RequestedJointStates.srv */
#ifndef JOINT_STATE_PUBLISHER_SERVICE_REQUESTEDJOINTSTATES_H
#define JOINT_STATE_PUBLISHER_SERVICE_REQUESTEDJOINTSTATES_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"




namespace joint_state_publisher
{
template <class ContainerAllocator>
struct RequestedJointStatesRequest_ : public ros::Message
{
  typedef RequestedJointStatesRequest_<ContainerAllocator> Type;

  RequestedJointStatesRequest_()
  : names()
  {
  }

  RequestedJointStatesRequest_(const ContainerAllocator& _alloc)
  : names(_alloc)
  {
  }

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _names_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  names;


  ROSCPP_DEPRECATED uint32_t get_names_size() const { return (uint32_t)names.size(); }
  ROSCPP_DEPRECATED void set_names_size(uint32_t size) { names.resize((size_t)size); }
  ROSCPP_DEPRECATED void get_names_vec(std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) const { vec = this->names; }
  ROSCPP_DEPRECATED void set_names_vec(const std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) { this->names = vec; }
private:
  static const char* __s_getDataType_() { return "joint_state_publisher/RequestedJointStatesRequest"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "dc7ae3609524b18034e49294a4ce670e"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "42807e19c10a36f2522bfa472fc172f4"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string[] names\n\
\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, names);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, names);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(names);
    return size;
  }

  typedef boost::shared_ptr< ::joint_state_publisher::RequestedJointStatesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::joint_state_publisher::RequestedJointStatesRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct RequestedJointStatesRequest
typedef  ::joint_state_publisher::RequestedJointStatesRequest_<std::allocator<void> > RequestedJointStatesRequest;

typedef boost::shared_ptr< ::joint_state_publisher::RequestedJointStatesRequest> RequestedJointStatesRequestPtr;
typedef boost::shared_ptr< ::joint_state_publisher::RequestedJointStatesRequest const> RequestedJointStatesRequestConstPtr;


template <class ContainerAllocator>
struct RequestedJointStatesResponse_ : public ros::Message
{
  typedef RequestedJointStatesResponse_<ContainerAllocator> Type;

  RequestedJointStatesResponse_()
  : found()
  {
  }

  RequestedJointStatesResponse_(const ContainerAllocator& _alloc)
  : found(_alloc)
  {
  }

  typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _found_type;
  std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  found;


  ROSCPP_DEPRECATED uint32_t get_found_size() const { return (uint32_t)found.size(); }
  ROSCPP_DEPRECATED void set_found_size(uint32_t size) { found.resize((size_t)size); }
  ROSCPP_DEPRECATED void get_found_vec(std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other > & vec) const { vec = this->found; }
  ROSCPP_DEPRECATED void set_found_vec(const std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other > & vec) { this->found = vec; }
private:
  static const char* __s_getDataType_() { return "joint_state_publisher/RequestedJointStatesResponse"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "0370add1a7606656b0c3ee96731c9cc3"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "42807e19c10a36f2522bfa472fc172f4"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
uint32[] found\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, found);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, found);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(found);
    return size;
  }

  typedef boost::shared_ptr< ::joint_state_publisher::RequestedJointStatesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::joint_state_publisher::RequestedJointStatesResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct RequestedJointStatesResponse
typedef  ::joint_state_publisher::RequestedJointStatesResponse_<std::allocator<void> > RequestedJointStatesResponse;

typedef boost::shared_ptr< ::joint_state_publisher::RequestedJointStatesResponse> RequestedJointStatesResponsePtr;
typedef boost::shared_ptr< ::joint_state_publisher::RequestedJointStatesResponse const> RequestedJointStatesResponseConstPtr;

struct RequestedJointStates
{

typedef RequestedJointStatesRequest Request;
typedef RequestedJointStatesResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct RequestedJointStates
} // namespace joint_state_publisher

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::joint_state_publisher::RequestedJointStatesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dc7ae3609524b18034e49294a4ce670e";
  }

  static const char* value(const  ::joint_state_publisher::RequestedJointStatesRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xdc7ae3609524b180ULL;
  static const uint64_t static_value2 = 0x34e49294a4ce670eULL;
};

template<class ContainerAllocator>
struct DataType< ::joint_state_publisher::RequestedJointStatesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "joint_state_publisher/RequestedJointStatesRequest";
  }

  static const char* value(const  ::joint_state_publisher::RequestedJointStatesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::joint_state_publisher::RequestedJointStatesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string[] names\n\
\n\
\n\
";
  }

  static const char* value(const  ::joint_state_publisher::RequestedJointStatesRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::joint_state_publisher::RequestedJointStatesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0370add1a7606656b0c3ee96731c9cc3";
  }

  static const char* value(const  ::joint_state_publisher::RequestedJointStatesResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0370add1a7606656ULL;
  static const uint64_t static_value2 = 0xb0c3ee96731c9cc3ULL;
};

template<class ContainerAllocator>
struct DataType< ::joint_state_publisher::RequestedJointStatesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "joint_state_publisher/RequestedJointStatesResponse";
  }

  static const char* value(const  ::joint_state_publisher::RequestedJointStatesResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::joint_state_publisher::RequestedJointStatesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
uint32[] found\n\
\n\
";
  }

  static const char* value(const  ::joint_state_publisher::RequestedJointStatesResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::joint_state_publisher::RequestedJointStatesRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.names);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RequestedJointStatesRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::joint_state_publisher::RequestedJointStatesResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.found);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RequestedJointStatesResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<joint_state_publisher::RequestedJointStates> {
  static const char* value() 
  {
    return "42807e19c10a36f2522bfa472fc172f4";
  }

  static const char* value(const joint_state_publisher::RequestedJointStates&) { return value(); } 
};

template<>
struct DataType<joint_state_publisher::RequestedJointStates> {
  static const char* value() 
  {
    return "joint_state_publisher/RequestedJointStates";
  }

  static const char* value(const joint_state_publisher::RequestedJointStates&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<joint_state_publisher::RequestedJointStatesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "42807e19c10a36f2522bfa472fc172f4";
  }

  static const char* value(const joint_state_publisher::RequestedJointStatesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<joint_state_publisher::RequestedJointStatesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "joint_state_publisher/RequestedJointStates";
  }

  static const char* value(const joint_state_publisher::RequestedJointStatesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<joint_state_publisher::RequestedJointStatesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "42807e19c10a36f2522bfa472fc172f4";
  }

  static const char* value(const joint_state_publisher::RequestedJointStatesResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<joint_state_publisher::RequestedJointStatesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "joint_state_publisher/RequestedJointStates";
  }

  static const char* value(const joint_state_publisher::RequestedJointStatesResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // JOINT_STATE_PUBLISHER_SERVICE_REQUESTEDJOINTSTATES_H

