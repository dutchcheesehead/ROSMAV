"""autogenerated by genmsg_py from ardrone_particle.msg. Do not edit."""
import roslib.message
import struct

import geometry_msgs.msg

class ardrone_particle(roslib.message.Message):
  _md5sum = "63dac531e83ea297340b80e965bc0e6e"
  _type = "ardrone_lclzr/ardrone_particle"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Vector3 w_pos
geometry_msgs/Vector3 w_linvel
geometry_msgs/Vector3 drone_rpy
uint32 seqcnt
float64 wt
================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  __slots__ = ['w_pos','w_linvel','drone_rpy','seqcnt','wt']
  _slot_types = ['geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','uint32','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       w_pos,w_linvel,drone_rpy,seqcnt,wt
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(ardrone_particle, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.w_pos is None:
        self.w_pos = geometry_msgs.msg.Vector3()
      if self.w_linvel is None:
        self.w_linvel = geometry_msgs.msg.Vector3()
      if self.drone_rpy is None:
        self.drone_rpy = geometry_msgs.msg.Vector3()
      if self.seqcnt is None:
        self.seqcnt = 0
      if self.wt is None:
        self.wt = 0.
    else:
      self.w_pos = geometry_msgs.msg.Vector3()
      self.w_linvel = geometry_msgs.msg.Vector3()
      self.drone_rpy = geometry_msgs.msg.Vector3()
      self.seqcnt = 0
      self.wt = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_9dId.pack(_x.w_pos.x, _x.w_pos.y, _x.w_pos.z, _x.w_linvel.x, _x.w_linvel.y, _x.w_linvel.z, _x.drone_rpy.x, _x.drone_rpy.y, _x.drone_rpy.z, _x.seqcnt, _x.wt))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.w_pos is None:
        self.w_pos = geometry_msgs.msg.Vector3()
      if self.w_linvel is None:
        self.w_linvel = geometry_msgs.msg.Vector3()
      if self.drone_rpy is None:
        self.drone_rpy = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 84
      (_x.w_pos.x, _x.w_pos.y, _x.w_pos.z, _x.w_linvel.x, _x.w_linvel.y, _x.w_linvel.z, _x.drone_rpy.x, _x.drone_rpy.y, _x.drone_rpy.z, _x.seqcnt, _x.wt,) = _struct_9dId.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_9dId.pack(_x.w_pos.x, _x.w_pos.y, _x.w_pos.z, _x.w_linvel.x, _x.w_linvel.y, _x.w_linvel.z, _x.drone_rpy.x, _x.drone_rpy.y, _x.drone_rpy.z, _x.seqcnt, _x.wt))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.w_pos is None:
        self.w_pos = geometry_msgs.msg.Vector3()
      if self.w_linvel is None:
        self.w_linvel = geometry_msgs.msg.Vector3()
      if self.drone_rpy is None:
        self.drone_rpy = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 84
      (_x.w_pos.x, _x.w_pos.y, _x.w_pos.z, _x.w_linvel.x, _x.w_linvel.y, _x.w_linvel.z, _x.drone_rpy.x, _x.drone_rpy.y, _x.drone_rpy.z, _x.seqcnt, _x.wt,) = _struct_9dId.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_9dId = struct.Struct("<9dId")
