"""autogenerated by genmsg_py from LocalizableObject.msg. Do not edit."""
import roslib.message
import struct


class LocalizableObject(roslib.message.Message):
  _md5sum = "7d1f0aa2894b6168a0ed8aeafb7bd204"
  _type = "irobot_test/LocalizableObject"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 objecttype
uint32 objectid
float64 posx
float64 posy
float64 yaw

"""
  __slots__ = ['objecttype','objectid','posx','posy','yaw']
  _slot_types = ['uint32','uint32','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       objecttype,objectid,posx,posy,yaw
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(LocalizableObject, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.objecttype is None:
        self.objecttype = 0
      if self.objectid is None:
        self.objectid = 0
      if self.posx is None:
        self.posx = 0.
      if self.posy is None:
        self.posy = 0.
      if self.yaw is None:
        self.yaw = 0.
    else:
      self.objecttype = 0
      self.objectid = 0
      self.posx = 0.
      self.posy = 0.
      self.yaw = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_2I3d.pack(_x.objecttype, _x.objectid, _x.posx, _x.posy, _x.yaw))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.objecttype, _x.objectid, _x.posx, _x.posy, _x.yaw,) = _struct_2I3d.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_2I3d.pack(_x.objecttype, _x.objectid, _x.posx, _x.posy, _x.yaw))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.objecttype, _x.objectid, _x.posx, _x.posy, _x.yaw,) = _struct_2I3d.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_2I3d = struct.Struct("<2I3d")
