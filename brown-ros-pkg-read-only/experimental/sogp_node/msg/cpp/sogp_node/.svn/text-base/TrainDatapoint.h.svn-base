/* auto-generated by genmsg_cpp from /home/iscander/ros/projects/sogp_node/msg/TrainDatapoint.msg.  Do not edit! */
#ifndef SOGP_NODE_TRAINDATAPOINT_H
#define SOGP_NODE_TRAINDATAPOINT_H

#include <string>
#include <vector>
#include "ros/message.h"
#include "ros/time.h"

#include "sogp_node/Vector.h"

namespace sogp_node
{

//! \htmlinclude TrainDatapoint.msg.html

class TrainDatapoint : public ros::Message
{
public:
  typedef boost::shared_ptr<TrainDatapoint> Ptr;
  typedef boost::shared_ptr<TrainDatapoint const> ConstPtr;

  typedef sogp_node::Vector _predictor_type;
  typedef sogp_node::Vector _target_type;

  sogp_node::Vector predictor;
  sogp_node::Vector target;

  TrainDatapoint() : ros::Message()
  {
  }
  TrainDatapoint(const TrainDatapoint &copy) : ros::Message(),
    predictor(copy.predictor),
    target(copy.target)
  {
    (void)copy;
  }
  TrainDatapoint &operator =(const TrainDatapoint &copy)
  {
    if (this == &copy)
      return *this;
    predictor = copy.predictor;
    target = copy.target;
    return *this;
  }
  virtual ~TrainDatapoint() 
  {
  }
  inline static std::string __s_getDataType() { return std::string("sogp_node/TrainDatapoint"); }
  inline static std::string __s_getMD5Sum() { return std::string("23cafbf003e8c14d0247eb42376c3366"); }
  inline static std::string __s_getMessageDefinition()
  {
    return std::string(
    "Vector predictor\n"
    "Vector target\n"
    "================================================================================\n"
    "MSG: sogp_node/Vector\n"
    "float32[] data\n"
    "\n"
    "\n"
    );
  }
  inline virtual const std::string __getDataType() const { return __s_getDataType(); }
  inline virtual const std::string __getMD5Sum() const { return __s_getMD5Sum(); }
  inline virtual const std::string __getMessageDefinition() const { return __s_getMessageDefinition(); }
  inline uint32_t serializationLength() const
  {
    unsigned __l = 0;
    __l += predictor.serializationLength(); // predictor
    __l += target.serializationLength(); // target
    return __l;
  }
  virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    write_ptr = predictor.serialize(write_ptr, seq);
    write_ptr = target.serialize(write_ptr, seq);
    return write_ptr;
  }
  virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    read_ptr = predictor.deserialize(read_ptr);
    read_ptr = target.deserialize(read_ptr);
    return read_ptr;
  }
};

typedef boost::shared_ptr<TrainDatapoint> TrainDatapointPtr;
typedef boost::shared_ptr<TrainDatapoint const> TrainDatapointConstPtr;


}

#endif
