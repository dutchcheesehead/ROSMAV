/* auto-generated by genmsg_cpp from /home/iscander/ros/projects/sogp_node/msg/TrainMatrix.msg.  Do not edit! */
#ifndef SOGP_NODE_TRAINMATRIX_H
#define SOGP_NODE_TRAINMATRIX_H

#include <string>
#include <vector>
#include "ros/message.h"
#include "ros/time.h"

#include "sogp_node/Vector.h"
#include "sogp_node/Matrix.h"

namespace sogp_node
{

//! \htmlinclude TrainMatrix.msg.html

class TrainMatrix : public ros::Message
{
public:
  typedef boost::shared_ptr<TrainMatrix> Ptr;
  typedef boost::shared_ptr<TrainMatrix const> ConstPtr;

  typedef sogp_node::Matrix _predictor_type;
  typedef sogp_node::Matrix _target_type;

  sogp_node::Matrix predictor;
  sogp_node::Matrix target;

  TrainMatrix() : ros::Message()
  {
  }
  TrainMatrix(const TrainMatrix &copy) : ros::Message(),
    predictor(copy.predictor),
    target(copy.target)
  {
    (void)copy;
  }
  TrainMatrix &operator =(const TrainMatrix &copy)
  {
    if (this == &copy)
      return *this;
    predictor = copy.predictor;
    target = copy.target;
    return *this;
  }
  virtual ~TrainMatrix() 
  {
  }
  inline static std::string __s_getDataType() { return std::string("sogp_node/TrainMatrix"); }
  inline static std::string __s_getMD5Sum() { return std::string("9184cbeaeab8137e5760f8151a90613f"); }
  inline static std::string __s_getMessageDefinition()
  {
    return std::string(
    "Matrix predictor\n"
    "Matrix target\n"
    "================================================================================\n"
    "MSG: sogp_node/Matrix\n"
    "Vector[] matrix_rows\n"
    "\n"
    "================================================================================\n"
    "MSG: sogp_node/Vector\n"
    "float32[] data\n"
    "\n"
    "\n"
    );
  }
  inline virtual const std::string __getDataType() const { return __s_getDataType(); }
  inline virtual const std::string __getMD5Sum() const { return __s_getMD5Sum(); }
  inline virtual const std::string __getMessageDefinition() const { return __s_getMessageDefinition(); }
  inline uint32_t serializationLength() const
  {
    unsigned __l = 0;
    __l += predictor.serializationLength(); // predictor
    __l += target.serializationLength(); // target
    return __l;
  }
  virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    write_ptr = predictor.serialize(write_ptr, seq);
    write_ptr = target.serialize(write_ptr, seq);
    return write_ptr;
  }
  virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    read_ptr = predictor.deserialize(read_ptr);
    read_ptr = target.deserialize(read_ptr);
    return read_ptr;
  }
};

typedef boost::shared_ptr<TrainMatrix> TrainMatrixPtr;
typedef boost::shared_ptr<TrainMatrix const> TrainMatrixConstPtr;


}

#endif
