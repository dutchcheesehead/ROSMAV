/* auto-generated by genmsg_cpp from /home/iscander/ros/projects/sogp_node/msg/Datapoint.msg.  Do not edit! */
package ros.pkg.sogp_node.msg;


import java.nio.ByteBuffer;

public  class Datapoint extends ros.communication.Message
{

  public float[] data;

  public Datapoint() {
 super();
  data = new float[0];

  }
  public static java.lang.String __s_getDataType() { return "sogp_node/Datapoint"; }
  public static java.lang.String __s_getMD5Sum() { return "420cd38b6b071cd49f2970c3e2cee511"; }
  public static java.lang.String __s_getMessageDefinition()
  {
    return 
    "float32[] data\n" + 
    "\n" + 
    "\n" + 
    "";
  }
  public java.lang.String getDataType() { return __s_getDataType(); }
  public java.lang.String getMD5Sum()   { return __s_getMD5Sum(); }
  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }
  public Datapoint clone() {
    Datapoint clone = (Datapoint)super.clone();
      data =  (float[])(clone.data.clone());
    return clone;
  }

  public static java.util.Map<java.lang.String, java.lang.String> fieldTypes() {
         java.util.HashMap<java.lang.String, java.lang.String> m = new java.util.HashMap<java.lang.String, java.lang.String>  ();      m.put("data", "float[]");
     return m;
  }

  public static java.util.Set<java.lang.String> submessageTypes() {
         java.util.HashSet<java.lang.String> s = new java.util.HashSet<java.lang.String>  ();      return s;
  }

  public void setTo(ros.communication.Message __m) {
    if (!(__m instanceof Datapoint)) throw new RuntimeException("Invalid Type");
    Datapoint __m2 = (Datapoint) __m;
    data = __m2.data;
    }

  public int serializationLength() 
  {
    int __l = 0;
    __l += 4 + (data.length == 0 ? 0 : data.length * (4)); // data
    return __l;
  }
  public void serialize(ByteBuffer bb, int seq) {
    bb.putInt(data.length);
    bb.position(bb.position() + bb.asFloatBuffer().put(data).position() * 4);
  }
  public void deserialize(ByteBuffer bb)  {
     int data_len = bb.getInt();
    data = new float[data_len];
    bb.position(bb.position() + bb.asFloatBuffer().get(data).position() * 4);
  }
}

