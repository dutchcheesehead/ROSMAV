# autogenerated by genmsg_py from PredictRequest.msg. Do not edit.
import roslib.message
import struct

import sogp_node.msg
## \htmlinclude PredictRequest.msg.html

class PredictRequest(roslib.message.Message):
  _md5sum = "a580f54591e86146ddf9dec026d34cea"
  _type = "sogp_node/PredictRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Vector predictor

================================================================================
MSG: sogp_node/Vector
float32[] data

"""
  __slots__ = ['predictor']
  _slot_types = ['Vector']

  ## Constructor. Any message fields that are implicitly/explicitly
  ## set to None will be assigned a default value. The recommend
  ## use is keyword arguments as this is more robust to future message
  ## changes.  You cannot mix in-order arguments and keyword arguments.
  ##
  ## The available fields are:
  ##   predictor
  ##
  ## @param args: complete set of field values, in .msg order
  ## @param kwds: use keyword arguments corresponding to message field names
  ## to set specific fields. 
  def __init__(self, *args, **kwds):
    super(PredictRequest, self).__init__(*args, **kwds)
    #message fields cannot be None, assign default values for those that are
    if self.predictor is None:
      self.predictor = sogp_node.msg.Vector()

  ## internal API method
  def _get_types(self): return PredictRequest._slot_types

  ## serialize message into buffer
  ## @param buff StringIO: buffer
  def serialize(self, buff):
    try:
      #serialize self.predictor.data
      length = len(self.predictor.data)
      buff.write(struct.pack('<I', length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.predictor.data))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance
  ## @param str str: byte array of serialized message
  def deserialize(self, str):
    try:
      if self.predictor is None:
        self.predictor = sogp_node.msg.Vector()
      end = 0
      #deserialize self.predictor.data
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.predictor.data = struct.unpack(pattern, str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  ## serialize message with numpy array types into buffer
  ## @param buff StringIO: buffer
  ## @param numpy module: numpy python module
  def serialize_numpy(self, buff, numpy):
    try:
      #serialize self.predictor.data
      length = len(self.predictor.data)
      buff.write(struct.pack('<I', length))
      pattern = '<%sf'%length
      buff.write(self.predictor.data.tostring())
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance using numpy for array types
  ## @param str str: byte array of serialized message
  ## @param numpy module: numpy python module
  def deserialize_numpy(self, str, numpy):
    try:
      if self.predictor is None:
        self.predictor = sogp_node.msg.Vector()
      end = 0
      #deserialize self.predictor.data
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.predictor.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

# autogenerated by genmsg_py from PredictResponse.msg. Do not edit.
import roslib.message
import struct

import sogp_node.msg
## \htmlinclude PredictResponse.msg.html

class PredictResponse(roslib.message.Message):
  _md5sum = "b346ac47afbac7586796d179e2e81ad4"
  _type = "sogp_node/PredictResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Vector prediction
string error_msg

================================================================================
MSG: sogp_node/Vector
float32[] data

"""
  __slots__ = ['prediction','error_msg']
  _slot_types = ['Vector','string']

  ## Constructor. Any message fields that are implicitly/explicitly
  ## set to None will be assigned a default value. The recommend
  ## use is keyword arguments as this is more robust to future message
  ## changes.  You cannot mix in-order arguments and keyword arguments.
  ##
  ## The available fields are:
  ##   prediction,error_msg
  ##
  ## @param args: complete set of field values, in .msg order
  ## @param kwds: use keyword arguments corresponding to message field names
  ## to set specific fields. 
  def __init__(self, *args, **kwds):
    super(PredictResponse, self).__init__(*args, **kwds)
    #message fields cannot be None, assign default values for those that are
    if self.prediction is None:
      self.prediction = sogp_node.msg.Vector()
    if self.error_msg is None:
      self.error_msg = ''

  ## internal API method
  def _get_types(self): return PredictResponse._slot_types

  ## serialize message into buffer
  ## @param buff StringIO: buffer
  def serialize(self, buff):
    try:
      #serialize self.prediction.data
      length = len(self.prediction.data)
      buff.write(struct.pack('<I', length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.prediction.data))
      length = len(self.error_msg)
      #serialize self.error_msg
      buff.write(struct.pack('<I%ss'%length, length, self.error_msg))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance
  ## @param str str: byte array of serialized message
  def deserialize(self, str):
    try:
      if self.prediction is None:
        self.prediction = sogp_node.msg.Vector()
      end = 0
      #deserialize self.prediction.data
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.prediction.data = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.error_msg
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.error_msg,) = struct.unpack(pattern, str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  ## serialize message with numpy array types into buffer
  ## @param buff StringIO: buffer
  ## @param numpy module: numpy python module
  def serialize_numpy(self, buff, numpy):
    try:
      #serialize self.prediction.data
      length = len(self.prediction.data)
      buff.write(struct.pack('<I', length))
      pattern = '<%sf'%length
      buff.write(self.prediction.data.tostring())
      length = len(self.error_msg)
      #serialize self.error_msg
      buff.write(struct.pack('<I%ss'%length, length, self.error_msg))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance using numpy for array types
  ## @param str str: byte array of serialized message
  ## @param numpy module: numpy python module
  def deserialize_numpy(self, str, numpy):
    try:
      if self.prediction is None:
        self.prediction = sogp_node.msg.Vector()
      end = 0
      #deserialize self.prediction.data
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.prediction.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.error_msg
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.error_msg,) = struct.unpack(pattern, str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

class Predict(roslib.message.ServiceDefinition):
  _type          = 'sogp_node/Predict'
  _md5sum = 'fba85ef2d1dc3a06205281f14b943df8'
  _request_class  = PredictRequest
  _response_class = PredictResponse
