# autogenerated by genmsg_py from TrainMatrix.msg. Do not edit.
import roslib.message
import struct

import sogp_node.msg
## \htmlinclude TrainMatrix.msg.html

class TrainMatrix(roslib.message.Message):
  _md5sum = "9184cbeaeab8137e5760f8151a90613f"
  _type = "sogp_node/TrainMatrix"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Matrix predictor
Matrix target
================================================================================
MSG: sogp_node/Matrix
Vector[] matrix_rows

================================================================================
MSG: sogp_node/Vector
float32[] data

"""
  __slots__ = ['predictor','target']
  _slot_types = ['Matrix','Matrix']

  ## Constructor. Any message fields that are implicitly/explicitly
  ## set to None will be assigned a default value. The recommend
  ## use is keyword arguments as this is more robust to future message
  ## changes.  You cannot mix in-order arguments and keyword arguments.
  ##
  ## The available fields are:
  ##   predictor,target
  ##
  ## @param args: complete set of field values, in .msg order
  ## @param kwds: use keyword arguments corresponding to message field names
  ## to set specific fields. 
  def __init__(self, *args, **kwds):
    super(TrainMatrix, self).__init__(*args, **kwds)
    #message fields cannot be None, assign default values for those that are
    if self.predictor is None:
      self.predictor = sogp_node.msg.Matrix()
    if self.target is None:
      self.target = sogp_node.msg.Matrix()

  ## internal API method
  def _get_types(self): return TrainMatrix._slot_types

  ## serialize message into buffer
  ## @param buff StringIO: buffer
  def serialize(self, buff):
    try:
      #serialize self.predictor.matrix_rows
      length = len(self.predictor.matrix_rows)
      buff.write(struct.pack('<I', length))
      for val1 in self.predictor.matrix_rows:
        #serialize val1.data
        length = len(val1.data)
        buff.write(struct.pack('<I', length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.data))
      #serialize self.target.matrix_rows
      length = len(self.target.matrix_rows)
      buff.write(struct.pack('<I', length))
      for val1 in self.target.matrix_rows:
        #serialize val1.data
        length = len(val1.data)
        buff.write(struct.pack('<I', length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.data))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance
  ## @param str str: byte array of serialized message
  def deserialize(self, str):
    try:
      if self.predictor is None:
        self.predictor = sogp_node.msg.Matrix()
      if self.target is None:
        self.target = sogp_node.msg.Matrix()
      end = 0
      #deserialize self.predictor.matrix_rows
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      self.predictor.matrix_rows = []
      for i in xrange(0, length):
        val1 = sogp_node.msg.Vector()
        #deserialize val1.data
        start = end
        end += 4
        (length,) = struct.unpack('<I',str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = struct.unpack(pattern, str[start:end])
        self.predictor.matrix_rows.append(val1)
      #deserialize self.target.matrix_rows
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      self.target.matrix_rows = []
      for i in xrange(0, length):
        val1 = sogp_node.msg.Vector()
        #deserialize val1.data
        start = end
        end += 4
        (length,) = struct.unpack('<I',str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = struct.unpack(pattern, str[start:end])
        self.target.matrix_rows.append(val1)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  ## serialize message with numpy array types into buffer
  ## @param buff StringIO: buffer
  ## @param numpy module: numpy python module
  def serialize_numpy(self, buff, numpy):
    try:
      #serialize self.predictor.matrix_rows
      length = len(self.predictor.matrix_rows)
      buff.write(struct.pack('<I', length))
      for val1 in self.predictor.matrix_rows:
        #serialize val1.data
        length = len(val1.data)
        buff.write(struct.pack('<I', length))
        pattern = '<%sf'%length
        buff.write(val1.data.tostring())
      #serialize self.target.matrix_rows
      length = len(self.target.matrix_rows)
      buff.write(struct.pack('<I', length))
      for val1 in self.target.matrix_rows:
        #serialize val1.data
        length = len(val1.data)
        buff.write(struct.pack('<I', length))
        pattern = '<%sf'%length
        buff.write(val1.data.tostring())
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance using numpy for array types
  ## @param str str: byte array of serialized message
  ## @param numpy module: numpy python module
  def deserialize_numpy(self, str, numpy):
    try:
      if self.predictor is None:
        self.predictor = sogp_node.msg.Matrix()
      if self.target is None:
        self.target = sogp_node.msg.Matrix()
      end = 0
      #deserialize self.predictor.matrix_rows
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      self.predictor.matrix_rows = []
      for i in xrange(0, length):
        val1 = sogp_node.msg.Vector()
        #deserialize val1.data
        start = end
        end += 4
        (length,) = struct.unpack('<I',str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.predictor.matrix_rows.append(val1)
      #deserialize self.target.matrix_rows
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      self.target.matrix_rows = []
      for i in xrange(0, length):
        val1 = sogp_node.msg.Vector()
        #deserialize val1.data
        start = end
        end += 4
        (length,) = struct.unpack('<I',str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.target.matrix_rows.append(val1)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

