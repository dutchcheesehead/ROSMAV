/* auto-generated by genmsg_cpp from /opt/ros/boxturtle/ros/aggeliki/message_passing_code/batman_mesh_info/msg/WifiNNs.msg.  Do not edit! */
#ifndef BATMAN_MESH_INFO_WIFINNS_H
#define BATMAN_MESH_INFO_WIFINNS_H

#include <string>
#include <vector>
#include "ros/message.h"
#include "ros/debug.h"
#include "ros/assert.h"
#include "ros/time.h"

#include "batman_mesh_info/WifiNN.h"

namespace batman_mesh_info
{

//! \htmlinclude WifiNNs.msg.html

class WifiNNs : public ros::Message
{
public:
  typedef boost::shared_ptr<WifiNNs> Ptr;
  typedef boost::shared_ptr<WifiNNs const> ConstPtr;

  typedef std::vector<batman_mesh_info::WifiNN> _neighbors_type;
  typedef uint32_t _count_type;

  std::vector<batman_mesh_info::WifiNN> neighbors;
  uint32_t count;

  WifiNNs() : ros::Message(),
    count(0)
  {
  }
  WifiNNs(const WifiNNs &copy) : ros::Message(),
    count(copy.count)
  {
    (void)copy;
    neighbors = copy.neighbors;
  }
  WifiNNs &operator =(const WifiNNs &copy)
  {
    if (this == &copy)
      return *this;
    neighbors.clear();
    neighbors = copy.neighbors;
    count = copy.count;
    return *this;
  }
  virtual ~WifiNNs() 
  {
    neighbors.clear();
  }
  inline static std::string __s_getDataType() { return std::string("batman_mesh_info/WifiNNs"); }
  inline static std::string __s_getMD5Sum() { return std::string("136c3022e5cd7b26ece6bbf1075d76ce"); }
  inline static std::string __s_getMessageDefinition()
  {
    return std::string(
    "WifiNN[] neighbors\n"
    "uint32 count\n"
    "\n"
    "================================================================================\n"
    "MSG: batman_mesh_info/WifiNN\n"
    "string ip\n"
    "uint32 quality\n"
    "\n"
    "\n"
    );
  }
  inline virtual const std::string __getDataType() const { return __s_getDataType(); }
  inline virtual const std::string __getMD5Sum() const { return __s_getMD5Sum(); }
  inline virtual const std::string __getMessageDefinition() const { return __s_getMessageDefinition(); }
  void set_neighbors_size(uint32_t __ros_new_size)
  {
    this->neighbors.resize(__ros_new_size);
  }
  inline uint32_t get_neighbors_size() const { return neighbors.size(); }
  uint32_t calc_neighbors_array_serialization_len() const
  {
    uint32_t l = 0;
    uint32_t neighbors_size = neighbors.size();
    for (size_t i = 0; i < neighbors_size; i++)
      l += neighbors[i].serializationLength();
    return l;
  }
  inline void get_neighbors_vec (std::vector<batman_mesh_info::WifiNN> &__ros_vec) const
  {
    __ros_vec = this->neighbors;
  }
  inline void set_neighbors_vec(const std::vector<batman_mesh_info::WifiNN> &__ros_vec)
  {
    this->neighbors = __ros_vec;
  }
  inline uint32_t serializationLength() const
  {
    unsigned __l = 0;
    __l += 4 + calc_neighbors_array_serialization_len(); // neighbors
    __l += 4; // count
    return __l;
  }
  virtual uint8_t *serialize(uint8_t *write_ptr,
#if defined(__GNUC__)
                             __attribute__((unused)) uint32_t seq) const
#else
                             uint32_t seq) const
#endif
  {
    uint32_t __neighbors_size = neighbors.size();
    SROS_SERIALIZE_PRIMITIVE(write_ptr, __neighbors_size);
    for (size_t i = 0; i < __neighbors_size; i++)
      write_ptr = neighbors[i].serialize(write_ptr, seq);
    SROS_SERIALIZE_PRIMITIVE(write_ptr, count);
    return write_ptr;
  }
  virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    uint32_t __neighbors_size;
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, __neighbors_size);
    set_neighbors_size(__neighbors_size);
    for (size_t i = 0; i < __neighbors_size; i++)
      read_ptr = neighbors[i].deserialize(read_ptr);
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, count);
    return read_ptr;
  }
};

typedef boost::shared_ptr<WifiNNs> WifiNNsPtr;
typedef boost::shared_ptr<WifiNNs const> WifiNNsConstPtr;


}

#endif
