# autogenerated by genmsg_py from WifiNNs.msg. Do not edit.
import roslib.message
import struct

import batman_mesh_info.msg

class WifiNNs(roslib.message.Message):
  _md5sum = "136c3022e5cd7b26ece6bbf1075d76ce"
  _type = "batman_mesh_info/WifiNNs"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """WifiNN[] neighbors
uint32 count

================================================================================
MSG: batman_mesh_info/WifiNN
string ip
uint32 quality

"""
  __slots__ = ['neighbors','count']
  _slot_types = ['batman_mesh_info/WifiNN[]','uint32']

  ## Constructor. Any message fields that are implicitly/explicitly
  ## set to None will be assigned a default value. The recommend
  ## use is keyword arguments as this is more robust to future message
  ## changes.  You cannot mix in-order arguments and keyword arguments.
  ##
  ## The available fields are:
  ##   neighbors,count
  ##
  ## @param self: self
  ## @param args: complete set of field values, in .msg order
  ## @param kwds: use keyword arguments corresponding to message field names
  ## to set specific fields. 
  def __init__(self, *args, **kwds):
    if args or kwds:
      super(WifiNNs, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.neighbors is None:
        self.neighbors = []
      if self.count is None:
        self.count = 0
    else:
      self.neighbors = []
      self.count = 0

  ## internal API method
  def _get_types(self): return self._slot_types

  ## serialize message into buffer
  ## @param buff StringIO: buffer
  def serialize(self, buff):
    try:
      #serialize self.neighbors
      length = len(self.neighbors)
      buff.write(struct.pack('<I', length))
      for val1 in self.neighbors:
        length = len(val1.ip)
        #serialize val1.ip
        buff.write(struct.pack('<I%ss'%length, length, val1.ip))
        buff.write(struct.pack('<I', val1.quality))
      buff.write(struct.pack('<I', self.count))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance
  ## @param self: self
  ## @param str str: byte array of serialized message
  def deserialize(self, str):
    try:
      end = 0
      #deserialize self.neighbors
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      self.neighbors = []
      for i in xrange(0, length):
        val1 = batman_mesh_info.msg.WifiNN()
        start = end
        end += 4
        (length,) = struct.unpack('<I',str[start:end])
        #deserialize val1.ip
        pattern = '<%ss'%length
        start = end
        end += struct.calcsize(pattern)
        (val1.ip,) = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (val1.quality,) = struct.unpack('<I',str[start:end])
        self.neighbors.append(val1)
      start = end
      end += 4
      (self.count,) = struct.unpack('<I',str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  ## serialize message with numpy array types into buffer
  ## @param self: self
  ## @param buff StringIO: buffer
  ## @param numpy module: numpy python module
  def serialize_numpy(self, buff, numpy):
    try:
      #serialize self.neighbors
      length = len(self.neighbors)
      buff.write(struct.pack('<I', length))
      for val1 in self.neighbors:
        length = len(val1.ip)
        #serialize val1.ip
        buff.write(struct.pack('<I%ss'%length, length, val1.ip))
        buff.write(struct.pack('<I', val1.quality))
      buff.write(struct.pack('<I', self.count))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance using numpy for array types
  ## @param self: self
  ## @param str str: byte array of serialized message
  ## @param numpy module: numpy python module
  def deserialize_numpy(self, str, numpy):
    try:
      end = 0
      #deserialize self.neighbors
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      self.neighbors = []
      for i in xrange(0, length):
        val1 = batman_mesh_info.msg.WifiNN()
        start = end
        end += 4
        (length,) = struct.unpack('<I',str[start:end])
        #deserialize val1.ip
        pattern = '<%ss'%length
        start = end
        end += struct.calcsize(pattern)
        (val1.ip,) = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (val1.quality,) = struct.unpack('<I',str[start:end])
        self.neighbors.append(val1)
      start = end
      end += 4
      (self.count,) = struct.unpack('<I',str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

