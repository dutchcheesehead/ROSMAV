# autogenerated by genmsg_py from GraphMap.msg. Do not edit.
import roslib.message
import struct

import roslib.msg
import map_loader.msg
import position_tracker.msg

class GraphMap(roslib.message.Message):
  _md5sum = "54ffc03454dd35e15b468ce8a11c1c6c"
  _type = "map_loader/GraphMap"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Node[] nodes
Edge[] edges


================================================================================
MSG: map_loader/Node
int32 id
#Node previous
int32 distanceFromStart
position_tracker/Position p


================================================================================
MSG: position_tracker/Position
Header header
float64 x
float64 y
float64 theta

================================================================================
MSG: roslib/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: map_loader/Edge
uint32 node1_id
uint32 node2_id
int32 distance


"""
  __slots__ = ['nodes','edges']
  _slot_types = ['map_loader/Node[]','map_loader/Edge[]']

  ## Constructor. Any message fields that are implicitly/explicitly
  ## set to None will be assigned a default value. The recommend
  ## use is keyword arguments as this is more robust to future message
  ## changes.  You cannot mix in-order arguments and keyword arguments.
  ##
  ## The available fields are:
  ##   nodes,edges
  ##
  ## @param self: self
  ## @param args: complete set of field values, in .msg order
  ## @param kwds: use keyword arguments corresponding to message field names
  ## to set specific fields. 
  def __init__(self, *args, **kwds):
    if args or kwds:
      super(GraphMap, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.nodes is None:
        self.nodes = []
      if self.edges is None:
        self.edges = []
    else:
      self.nodes = []
      self.edges = []

  ## internal API method
  def _get_types(self): return self._slot_types

  ## serialize message into buffer
  ## @param buff StringIO: buffer
  def serialize(self, buff):
    try:
      #serialize self.nodes
      length = len(self.nodes)
      buff.write(struct.pack('<I', length))
      for val1 in self.nodes:
        buff.write(struct.pack('<2i', val1.id, val1.distanceFromStart))
        buff.write(struct.pack('<I', val1.p.header.seq))
        buff.write(struct.pack('<2I', val1.p.header.stamp.secs, val1.p.header.stamp.nsecs))
        length = len(val1.p.header.frame_id)
        #serialize val1.p.header.frame_id
        buff.write(struct.pack('<I%ss'%length, length, val1.p.header.frame_id))
        buff.write(struct.pack('<3d', val1.p.x, val1.p.y, val1.p.theta))
      #serialize self.edges
      length = len(self.edges)
      buff.write(struct.pack('<I', length))
      for val1 in self.edges:
        buff.write(struct.pack('<2Ii', val1.node1_id, val1.node2_id, val1.distance))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance
  ## @param self: self
  ## @param str str: byte array of serialized message
  def deserialize(self, str):
    try:
      end = 0
      #deserialize self.nodes
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      self.nodes = []
      for i in xrange(0, length):
        val1 = map_loader.msg.Node()
        start = end
        end += 8
        (val1.id, val1.distanceFromStart,) = struct.unpack('<2i',str[start:end])
        start = end
        end += 4
        (val1.p.header.seq,) = struct.unpack('<I',str[start:end])
        start = end
        end += 8
        (val1.p.header.stamp.secs, val1.p.header.stamp.nsecs,) = struct.unpack('<2I',str[start:end])
        start = end
        end += 4
        (length,) = struct.unpack('<I',str[start:end])
        #deserialize val1.p.header.frame_id
        pattern = '<%ss'%length
        start = end
        end += struct.calcsize(pattern)
        (val1.p.header.frame_id,) = struct.unpack(pattern, str[start:end])
        start = end
        end += 24
        (val1.p.x, val1.p.y, val1.p.theta,) = struct.unpack('<3d',str[start:end])
        self.nodes.append(val1)
      #deserialize self.edges
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      self.edges = []
      for i in xrange(0, length):
        val1 = map_loader.msg.Edge()
        start = end
        end += 12
        (val1.node1_id, val1.node2_id, val1.distance,) = struct.unpack('<2Ii',str[start:end])
        self.edges.append(val1)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  ## serialize message with numpy array types into buffer
  ## @param self: self
  ## @param buff StringIO: buffer
  ## @param numpy module: numpy python module
  def serialize_numpy(self, buff, numpy):
    try:
      #serialize self.nodes
      length = len(self.nodes)
      buff.write(struct.pack('<I', length))
      for val1 in self.nodes:
        buff.write(struct.pack('<2i', val1.id, val1.distanceFromStart))
        buff.write(struct.pack('<I', val1.p.header.seq))
        buff.write(struct.pack('<2I', val1.p.header.stamp.secs, val1.p.header.stamp.nsecs))
        length = len(val1.p.header.frame_id)
        #serialize val1.p.header.frame_id
        buff.write(struct.pack('<I%ss'%length, length, val1.p.header.frame_id))
        buff.write(struct.pack('<3d', val1.p.x, val1.p.y, val1.p.theta))
      #serialize self.edges
      length = len(self.edges)
      buff.write(struct.pack('<I', length))
      for val1 in self.edges:
        buff.write(struct.pack('<2Ii', val1.node1_id, val1.node2_id, val1.distance))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance using numpy for array types
  ## @param self: self
  ## @param str str: byte array of serialized message
  ## @param numpy module: numpy python module
  def deserialize_numpy(self, str, numpy):
    try:
      end = 0
      #deserialize self.nodes
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      self.nodes = []
      for i in xrange(0, length):
        val1 = map_loader.msg.Node()
        start = end
        end += 8
        (val1.id, val1.distanceFromStart,) = struct.unpack('<2i',str[start:end])
        start = end
        end += 4
        (val1.p.header.seq,) = struct.unpack('<I',str[start:end])
        start = end
        end += 8
        (val1.p.header.stamp.secs, val1.p.header.stamp.nsecs,) = struct.unpack('<2I',str[start:end])
        start = end
        end += 4
        (length,) = struct.unpack('<I',str[start:end])
        #deserialize val1.p.header.frame_id
        pattern = '<%ss'%length
        start = end
        end += struct.calcsize(pattern)
        (val1.p.header.frame_id,) = struct.unpack(pattern, str[start:end])
        start = end
        end += 24
        (val1.p.x, val1.p.y, val1.p.theta,) = struct.unpack('<3d',str[start:end])
        self.nodes.append(val1)
      #deserialize self.edges
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      self.edges = []
      for i in xrange(0, length):
        val1 = map_loader.msg.Edge()
        start = end
        end += 12
        (val1.node1_id, val1.node2_id, val1.distance,) = struct.unpack('<2Ii',str[start:end])
        self.edges.append(val1)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

