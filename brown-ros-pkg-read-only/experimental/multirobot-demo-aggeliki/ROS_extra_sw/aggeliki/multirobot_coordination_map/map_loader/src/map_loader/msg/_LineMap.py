# autogenerated by genmsg_py from LineMap.msg. Do not edit.
import roslib.message
import struct

import map_loader.msg

class LineMap(roslib.message.Message):
  _md5sum = "072543ff50146cfb44881689590ef3b7"
  _type = "map_loader/LineMap"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Line[] lines

================================================================================
MSG: map_loader/Line
float64 Ax
float64 Ay
float64 Bx
float64 By
float64 theta


"""
  __slots__ = ['lines']
  _slot_types = ['map_loader/Line[]']

  ## Constructor. Any message fields that are implicitly/explicitly
  ## set to None will be assigned a default value. The recommend
  ## use is keyword arguments as this is more robust to future message
  ## changes.  You cannot mix in-order arguments and keyword arguments.
  ##
  ## The available fields are:
  ##   lines
  ##
  ## @param self: self
  ## @param args: complete set of field values, in .msg order
  ## @param kwds: use keyword arguments corresponding to message field names
  ## to set specific fields. 
  def __init__(self, *args, **kwds):
    if args or kwds:
      super(LineMap, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.lines is None:
        self.lines = []
    else:
      self.lines = []

  ## internal API method
  def _get_types(self): return self._slot_types

  ## serialize message into buffer
  ## @param buff StringIO: buffer
  def serialize(self, buff):
    try:
      #serialize self.lines
      length = len(self.lines)
      buff.write(struct.pack('<I', length))
      for val1 in self.lines:
        buff.write(struct.pack('<5d', val1.Ax, val1.Ay, val1.Bx, val1.By, val1.theta))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance
  ## @param self: self
  ## @param str str: byte array of serialized message
  def deserialize(self, str):
    try:
      end = 0
      #deserialize self.lines
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      self.lines = []
      for i in xrange(0, length):
        val1 = map_loader.msg.Line()
        start = end
        end += 40
        (val1.Ax, val1.Ay, val1.Bx, val1.By, val1.theta,) = struct.unpack('<5d',str[start:end])
        self.lines.append(val1)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  ## serialize message with numpy array types into buffer
  ## @param self: self
  ## @param buff StringIO: buffer
  ## @param numpy module: numpy python module
  def serialize_numpy(self, buff, numpy):
    try:
      #serialize self.lines
      length = len(self.lines)
      buff.write(struct.pack('<I', length))
      for val1 in self.lines:
        buff.write(struct.pack('<5d', val1.Ax, val1.Ay, val1.Bx, val1.By, val1.theta))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance using numpy for array types
  ## @param self: self
  ## @param str str: byte array of serialized message
  ## @param numpy module: numpy python module
  def deserialize_numpy(self, str, numpy):
    try:
      end = 0
      #deserialize self.lines
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      self.lines = []
      for i in xrange(0, length):
        val1 = map_loader.msg.Line()
        start = end
        end += 40
        (val1.Ax, val1.Ay, val1.Bx, val1.By, val1.theta,) = struct.unpack('<5d',str[start:end])
        self.lines.append(val1)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

