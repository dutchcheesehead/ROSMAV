/* auto-generated by genmsg_cpp from /opt/ros/boxturtle/ros/aggeliki/map_loader/msg/LineMap.msg.  Do not edit! */
#ifndef MAP_LOADER_LINEMAP_H
#define MAP_LOADER_LINEMAP_H

#include <string>
#include <vector>
#include "ros/message.h"
#include "ros/debug.h"
#include "ros/assert.h"
#include "ros/time.h"

#include "map_loader/Line.h"

namespace map_loader
{

//! \htmlinclude LineMap.msg.html

class LineMap : public ros::Message
{
public:
  typedef boost::shared_ptr<LineMap> Ptr;
  typedef boost::shared_ptr<LineMap const> ConstPtr;

  typedef std::vector<map_loader::Line> _lines_type;

  std::vector<map_loader::Line> lines;

  LineMap() : ros::Message()
  {
  }
  LineMap(const LineMap &copy) : ros::Message()
  {
    (void)copy;
    lines = copy.lines;
  }
  LineMap &operator =(const LineMap &copy)
  {
    if (this == &copy)
      return *this;
    lines.clear();
    lines = copy.lines;
    return *this;
  }
  virtual ~LineMap() 
  {
    lines.clear();
  }
  inline static std::string __s_getDataType() { return std::string("map_loader/LineMap"); }
  inline static std::string __s_getMD5Sum() { return std::string("072543ff50146cfb44881689590ef3b7"); }
  inline static std::string __s_getMessageDefinition()
  {
    return std::string(
    "Line[] lines\n"
    "\n"
    "================================================================================\n"
    "MSG: map_loader/Line\n"
    "float64 Ax\n"
    "float64 Ay\n"
    "float64 Bx\n"
    "float64 By\n"
    "float64 theta\n"
    "\n"
    "\n"
    "\n"
    );
  }
  inline virtual const std::string __getDataType() const { return __s_getDataType(); }
  inline virtual const std::string __getMD5Sum() const { return __s_getMD5Sum(); }
  inline virtual const std::string __getMessageDefinition() const { return __s_getMessageDefinition(); }
  void set_lines_size(uint32_t __ros_new_size)
  {
    this->lines.resize(__ros_new_size);
  }
  inline uint32_t get_lines_size() const { return lines.size(); }
  inline void get_lines_vec (std::vector<map_loader::Line> &__ros_vec) const
  {
    __ros_vec = this->lines;
  }
  inline void set_lines_vec(const std::vector<map_loader::Line> &__ros_vec)
  {
    this->lines = __ros_vec;
  }
  inline uint32_t serializationLength() const
  {
    unsigned __l = 0;
    __l += 4 + (lines.size() ? lines.size() * lines[0].serializationLength() : 0); // lines
    return __l;
  }
  virtual uint8_t *serialize(uint8_t *write_ptr,
#if defined(__GNUC__)
                             __attribute__((unused)) uint32_t seq) const
#else
                             uint32_t seq) const
#endif
  {
    uint32_t __lines_size = lines.size();
    SROS_SERIALIZE_PRIMITIVE(write_ptr, __lines_size);
    for (size_t i = 0; i < __lines_size; i++)
      write_ptr = lines[i].serialize(write_ptr, seq);
    return write_ptr;
  }
  virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    uint32_t __lines_size;
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, __lines_size);
    set_lines_size(__lines_size);
    for (size_t i = 0; i < __lines_size; i++)
      read_ptr = lines[i].deserialize(read_ptr);
    return read_ptr;
  }
};

typedef boost::shared_ptr<LineMap> LineMapPtr;
typedef boost::shared_ptr<LineMap const> LineMapConstPtr;


}

#endif
