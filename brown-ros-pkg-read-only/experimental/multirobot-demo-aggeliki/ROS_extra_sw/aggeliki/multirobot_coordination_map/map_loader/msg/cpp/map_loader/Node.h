/* auto-generated by genmsg_cpp from /opt/ros/boxturtle/ros/aggeliki/map_loader/msg/Node.msg.  Do not edit! */
#ifndef MAP_LOADER_NODE_H
#define MAP_LOADER_NODE_H

#include <string>
#include <vector>
#include "ros/message.h"
#include "ros/debug.h"
#include "ros/assert.h"
#include "ros/time.h"

#include "roslib/Header.h"
#include "position_tracker/Position.h"

namespace map_loader
{

//! \htmlinclude Node.msg.html

class Node : public ros::Message
{
public:
  typedef boost::shared_ptr<Node> Ptr;
  typedef boost::shared_ptr<Node const> ConstPtr;

  typedef int32_t _id_type;
  typedef int32_t _distanceFromStart_type;
  typedef position_tracker::Position _p_type;

  int32_t id;
  int32_t distanceFromStart;
  position_tracker::Position p;

  Node() : ros::Message(),
    id(0),
    distanceFromStart(0)
  {
  }
  Node(const Node &copy) : ros::Message(),
    id(copy.id),
    distanceFromStart(copy.distanceFromStart),
    p(copy.p)
  {
    (void)copy;
  }
  Node &operator =(const Node &copy)
  {
    if (this == &copy)
      return *this;
    id = copy.id;
    distanceFromStart = copy.distanceFromStart;
    p = copy.p;
    return *this;
  }
  virtual ~Node() 
  {
  }
  inline static std::string __s_getDataType() { return std::string("map_loader/Node"); }
  inline static std::string __s_getMD5Sum() { return std::string("2f479844b828bc444ee1582b06d6c27d"); }
  inline static std::string __s_getMessageDefinition()
  {
    return std::string(
    "int32 id\n"
    "#Node previous\n"
    "int32 distanceFromStart\n"
    "position_tracker/Position p\n"
    "\n"
    "\n"
    "================================================================================\n"
    "MSG: position_tracker/Position\n"
    "Header header\n"
    "float64 x\n"
    "float64 y\n"
    "float64 theta\n"
    "\n"
    "================================================================================\n"
    "MSG: roslib/Header\n"
    "# Standard metadata for higher-level stamped data types.\n"
    "# This is generally used to communicate timestamped data \n"
    "# in a particular coordinate frame.\n"
    "# \n"
    "# sequence ID: consecutively increasing ID \n"
    "uint32 seq\n"
    "#Two-integer timestamp that is expressed as:\n"
    "# * stamp.secs: seconds (stamp_secs) since epoch\n"
    "# * stamp.nsecs: nanoseconds since stamp_secs\n"
    "# time-handling sugar is provided by the client library\n"
    "time stamp\n"
    "#Frame this data is associated with\n"
    "# 0: no frame\n"
    "# 1: global frame\n"
    "string frame_id\n"
    "\n"
    "\n"
    );
  }
  inline virtual const std::string __getDataType() const { return __s_getDataType(); }
  inline virtual const std::string __getMD5Sum() const { return __s_getMD5Sum(); }
  inline virtual const std::string __getMessageDefinition() const { return __s_getMessageDefinition(); }
  inline uint32_t serializationLength() const
  {
    unsigned __l = 0;
    __l += 4; // id
    __l += 4; // distanceFromStart
    __l += p.serializationLength(); // p
    return __l;
  }
  virtual uint8_t *serialize(uint8_t *write_ptr,
#if defined(__GNUC__)
                             __attribute__((unused)) uint32_t seq) const
#else
                             uint32_t seq) const
#endif
  {
    SROS_SERIALIZE_PRIMITIVE(write_ptr, id);
    SROS_SERIALIZE_PRIMITIVE(write_ptr, distanceFromStart);
    write_ptr = p.serialize(write_ptr, seq);
    return write_ptr;
  }
  virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, id);
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, distanceFromStart);
    read_ptr = p.deserialize(read_ptr);
    return read_ptr;
  }
};

typedef boost::shared_ptr<Node> NodePtr;
typedef boost::shared_ptr<Node const> NodeConstPtr;


}

#endif
