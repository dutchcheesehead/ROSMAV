/* auto-generated by genmsg_cpp from /opt/ros/boxturtle/ros/aggeliki/map_loader/msg/Line.msg.  Do not edit! */
#ifndef MAP_LOADER_LINE_H
#define MAP_LOADER_LINE_H

#include <string>
#include <vector>
#include "ros/message.h"
#include "ros/debug.h"
#include "ros/assert.h"
#include "ros/time.h"

namespace map_loader
{

//! \htmlinclude Line.msg.html

class Line : public ros::Message
{
public:
  typedef boost::shared_ptr<Line> Ptr;
  typedef boost::shared_ptr<Line const> ConstPtr;

  typedef double _Ax_type;
  typedef double _Ay_type;
  typedef double _Bx_type;
  typedef double _By_type;
  typedef double _theta_type;

  double Ax;
  double Ay;
  double Bx;
  double By;
  double theta;

  Line() : ros::Message(),
    Ax(0),
    Ay(0),
    Bx(0),
    By(0),
    theta(0)
  {
  }
  Line(const Line &copy) : ros::Message(),
    Ax(copy.Ax),
    Ay(copy.Ay),
    Bx(copy.Bx),
    By(copy.By),
    theta(copy.theta)
  {
    (void)copy;
  }
  Line &operator =(const Line &copy)
  {
    if (this == &copy)
      return *this;
    Ax = copy.Ax;
    Ay = copy.Ay;
    Bx = copy.Bx;
    By = copy.By;
    theta = copy.theta;
    return *this;
  }
  virtual ~Line() 
  {
  }
  inline static std::string __s_getDataType() { return std::string("map_loader/Line"); }
  inline static std::string __s_getMD5Sum() { return std::string("f387094a257ed90248cfd6e0d9b234da"); }
  inline static std::string __s_getMessageDefinition()
  {
    return std::string(
    "float64 Ax\n"
    "float64 Ay\n"
    "float64 Bx\n"
    "float64 By\n"
    "float64 theta\n"
    "\n"
    "\n"
    "\n"
    );
  }
  inline virtual const std::string __getDataType() const { return __s_getDataType(); }
  inline virtual const std::string __getMD5Sum() const { return __s_getMD5Sum(); }
  inline virtual const std::string __getMessageDefinition() const { return __s_getMessageDefinition(); }
  inline uint32_t serializationLength() const
  {
    unsigned __l = 0;
    __l += 8; // Ax
    __l += 8; // Ay
    __l += 8; // Bx
    __l += 8; // By
    __l += 8; // theta
    return __l;
  }
  virtual uint8_t *serialize(uint8_t *write_ptr,
#if defined(__GNUC__)
                             __attribute__((unused)) uint32_t seq) const
#else
                             uint32_t seq) const
#endif
  {
    SROS_SERIALIZE_PRIMITIVE(write_ptr, Ax);
    SROS_SERIALIZE_PRIMITIVE(write_ptr, Ay);
    SROS_SERIALIZE_PRIMITIVE(write_ptr, Bx);
    SROS_SERIALIZE_PRIMITIVE(write_ptr, By);
    SROS_SERIALIZE_PRIMITIVE(write_ptr, theta);
    return write_ptr;
  }
  virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, Ax);
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, Ay);
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, Bx);
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, By);
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, theta);
    return read_ptr;
  }
};

typedef boost::shared_ptr<Line> LinePtr;
typedef boost::shared_ptr<Line const> LineConstPtr;


}

#endif
