/* auto-generated by gensrv_cpp from /opt/ros/boxturtle/ros/aggeliki/path_generator/srv/generatePath.srv.  Do not edit! */
#ifndef SRV_PATH_GENERATOR_GENERATEPATH_H
#define SRV_PATH_GENERATOR_GENERATEPATH_H

#include <string>
#include <cstring>
#include <vector>
#include <map>
#include "ros/message.h"
#include "ros/time.h"

#include "roslib/Header.h"
#include "position_tracker/Position.h"
#include "map_loader/Node.h"
#include "map_loader/Edge.h"
#include "map_loader/GraphMap.h"

#include "roslib/Header.h"
#include "position_tracker/Position.h"
#include "map_loader/Node.h"
#include "path_navigator/Waypoints.h"

namespace path_generator
{

struct generatePath
{

inline static std::string getDataType() { return "path_generator/generatePath"; }
inline static std::string getMD5Sum() { return "cc37f76a27ae92c1ea557e7fc74eda2b"; }

//! \htmlinclude Request.msg.html

class Request : public ros::Message
{
public:
  typedef boost::shared_ptr<Request> Ptr;
  typedef boost::shared_ptr<Request const> ConstPtr;

  typedef uint32_t _type_type;
  typedef map_loader::GraphMap _gmap_type;
  typedef position_tracker::Position _init_pos_type;
  typedef position_tracker::Position _dst_pos_type;

  uint32_t type;
  map_loader::GraphMap gmap;
  position_tracker::Position init_pos;
  position_tracker::Position dst_pos;

  Request() : ros::Message(),
    type(0)
  {
  }
  Request(const Request &copy) : ros::Message(),
    type(copy.type),
    gmap(copy.gmap),
    init_pos(copy.init_pos),
    dst_pos(copy.dst_pos)
  {
    (void)copy;
  }
  Request &operator =(const Request &copy)
  {
    if (this == &copy)
      return *this;
    type = copy.type;
    gmap = copy.gmap;
    init_pos = copy.init_pos;
    dst_pos = copy.dst_pos;
    return *this;
  }
  virtual ~Request() 
  {
  }
  inline static std::string __s_getDataType() { return std::string("path_generator/generatePathRequest"); }
  inline static std::string __s_getMD5Sum() { return std::string(""); }
  inline static std::string __s_getMessageDefinition()
  {
    return std::string(
    "uint32 type\n"
    "map_loader/GraphMap gmap\n"
    "position_tracker/Position init_pos\n"
    "position_tracker/Position dst_pos\n"
    "\n"
    );
  }
  inline virtual const std::string __getDataType() const { return __s_getDataType(); }
  inline virtual const std::string __getMD5Sum() const { return __s_getMD5Sum(); }
  inline virtual const std::string __getMessageDefinition() const { return __s_getMessageDefinition(); }
  inline static std::string __s_getServerMD5Sum() { return std::string("cc37f76a27ae92c1ea557e7fc74eda2b"); }
  inline virtual const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum(); }
  inline static std::string __s_getServiceDataType() { return std::string("path_generator/generatePath"); }
  inline virtual const std::string __getServiceDataType() const { return __s_getServiceDataType(); }
  inline uint32_t serializationLength() const
  {
    unsigned __l = 0;
    __l += 4; // type
    __l += gmap.serializationLength(); // gmap
    __l += init_pos.serializationLength(); // init_pos
    __l += dst_pos.serializationLength(); // dst_pos
    return __l;
  }
  virtual uint8_t *serialize(uint8_t *write_ptr,
#if defined(__GNUC__)
                             __attribute__((unused)) uint32_t seq) const
#else
                             uint32_t seq) const
#endif
  {
    SROS_SERIALIZE_PRIMITIVE(write_ptr, type);
    write_ptr = gmap.serialize(write_ptr, seq);
    write_ptr = init_pos.serialize(write_ptr, seq);
    write_ptr = dst_pos.serialize(write_ptr, seq);
    return write_ptr;
  }
  virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, type);
    read_ptr = gmap.deserialize(read_ptr);
    read_ptr = init_pos.deserialize(read_ptr);
    read_ptr = dst_pos.deserialize(read_ptr);
    return read_ptr;
  }
};

typedef boost::shared_ptr<Request> RequestPtr;
typedef boost::shared_ptr<Request const> RequestConstPtr;

//! \htmlinclude Response.msg.html

class Response : public ros::Message
{
public:
  typedef boost::shared_ptr<Response> Ptr;
  typedef boost::shared_ptr<Response const> ConstPtr;

  typedef path_navigator::Waypoints _w_type;

  path_navigator::Waypoints w;

  Response() : ros::Message()
  {
  }
  Response(const Response &copy) : ros::Message(),
    w(copy.w)
  {
    (void)copy;
  }
  Response &operator =(const Response &copy)
  {
    if (this == &copy)
      return *this;
    w = copy.w;
    return *this;
  }
  virtual ~Response() 
  {
  }
  inline static std::string __s_getDataType() { return std::string("path_generator/generatePathResponse"); }
  inline static std::string __s_getMD5Sum() { return std::string(""); }
  inline static std::string __s_getMessageDefinition()
  {
    return std::string(
    "path_navigator/Waypoints w\n"
    "\n"
    "================================================================================\n"
    "MSG: map_loader/GraphMap\n"
    "Node[] nodes\n"
    "Edge[] edges\n"
    "\n"
    "\n"
    "================================================================================\n"
    "MSG: map_loader/Node\n"
    "int32 id\n"
    "#Node previous\n"
    "int32 distanceFromStart\n"
    "position_tracker/Position p\n"
    "\n"
    "\n"
    "================================================================================\n"
    "MSG: position_tracker/Position\n"
    "Header header\n"
    "float64 x\n"
    "float64 y\n"
    "float64 theta\n"
    "\n"
    "================================================================================\n"
    "MSG: roslib/Header\n"
    "# Standard metadata for higher-level stamped data types.\n"
    "# This is generally used to communicate timestamped data \n"
    "# in a particular coordinate frame.\n"
    "# \n"
    "# sequence ID: consecutively increasing ID \n"
    "uint32 seq\n"
    "#Two-integer timestamp that is expressed as:\n"
    "# * stamp.secs: seconds (stamp_secs) since epoch\n"
    "# * stamp.nsecs: nanoseconds since stamp_secs\n"
    "# time-handling sugar is provided by the client library\n"
    "time stamp\n"
    "#Frame this data is associated with\n"
    "# 0: no frame\n"
    "# 1: global frame\n"
    "string frame_id\n"
    "\n"
    "================================================================================\n"
    "MSG: map_loader/Edge\n"
    "uint32 node1_id\n"
    "uint32 node2_id\n"
    "int32 distance\n"
    "\n"
    "\n"
    "================================================================================\n"
    "MSG: path_navigator/Waypoints\n"
    "map_loader/Node[] waypoints\n"
    "\n"
    "\n"
    );
  }
  inline virtual const std::string __getDataType() const { return __s_getDataType(); }
  inline virtual const std::string __getMD5Sum() const { return __s_getMD5Sum(); }
  inline virtual const std::string __getMessageDefinition() const { return __s_getMessageDefinition(); }
  inline static std::string __s_getServerMD5Sum() { return std::string("cc37f76a27ae92c1ea557e7fc74eda2b"); }
  inline virtual const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum(); }
  inline static std::string __s_getServiceDataType() { return std::string("path_generator/generatePath"); }
  inline virtual const std::string __getServiceDataType() const { return __s_getServiceDataType(); }
  inline uint32_t serializationLength() const
  {
    unsigned __l = 0;
    __l += w.serializationLength(); // w
    return __l;
  }
  virtual uint8_t *serialize(uint8_t *write_ptr,
#if defined(__GNUC__)
                             __attribute__((unused)) uint32_t seq) const
#else
                             uint32_t seq) const
#endif
  {
    write_ptr = w.serialize(write_ptr, seq);
    return write_ptr;
  }
  virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    read_ptr = w.deserialize(read_ptr);
    return read_ptr;
  }
};

typedef boost::shared_ptr<Response> ResponsePtr;
typedef boost::shared_ptr<Response const> ResponseConstPtr;

Request request;
Response response;

};

}

#endif
