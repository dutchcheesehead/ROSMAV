/* auto-generated by gensrv_cpp from /opt/ros/boxturtle/ros/aggeliki/path_generator/srv/availableNextHops.srv.  Do not edit! */
#ifndef SRV_PATH_GENERATOR_AVAILABLENEXTHOPS_H
#define SRV_PATH_GENERATOR_AVAILABLENEXTHOPS_H

#include <string>
#include <cstring>
#include <vector>
#include <map>
#include "ros/message.h"
#include "ros/time.h"

#include "roslib/Header.h"
#include "position_tracker/Position.h"

#include "roslib/Header.h"
#include "position_tracker/Position.h"

namespace path_generator
{

struct availableNextHops
{

inline static std::string getDataType() { return "path_generator/availableNextHops"; }
inline static std::string getMD5Sum() { return "f5dedbcd134aa246c432cca1360aa1b2"; }

//! \htmlinclude Request.msg.html

class Request : public ros::Message
{
public:
  typedef boost::shared_ptr<Request> Ptr;
  typedef boost::shared_ptr<Request const> ConstPtr;

  typedef position_tracker::Position _cur_pos_type;
  typedef std::vector<position_tracker::Position> _neighbor_pos_type;

  position_tracker::Position cur_pos;
  std::vector<position_tracker::Position> neighbor_pos;

  Request() : ros::Message()
  {
  }
  Request(const Request &copy) : ros::Message(),
    cur_pos(copy.cur_pos)
  {
    (void)copy;
    neighbor_pos = copy.neighbor_pos;
  }
  Request &operator =(const Request &copy)
  {
    if (this == &copy)
      return *this;
    neighbor_pos.clear();
    cur_pos = copy.cur_pos;
    neighbor_pos = copy.neighbor_pos;
    return *this;
  }
  virtual ~Request() 
  {
    neighbor_pos.clear();
  }
  inline static std::string __s_getDataType() { return std::string("path_generator/availableNextHopsRequest"); }
  inline static std::string __s_getMD5Sum() { return std::string(""); }
  inline static std::string __s_getMessageDefinition()
  {
    return std::string(
    "position_tracker/Position cur_pos\n"
    "position_tracker/Position[] neighbor_pos\n"
    "\n"
    );
  }
  inline virtual const std::string __getDataType() const { return __s_getDataType(); }
  inline virtual const std::string __getMD5Sum() const { return __s_getMD5Sum(); }
  inline virtual const std::string __getMessageDefinition() const { return __s_getMessageDefinition(); }
  inline static std::string __s_getServerMD5Sum() { return std::string("f5dedbcd134aa246c432cca1360aa1b2"); }
  inline virtual const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum(); }
  inline static std::string __s_getServiceDataType() { return std::string("path_generator/availableNextHops"); }
  inline virtual const std::string __getServiceDataType() const { return __s_getServiceDataType(); }
  void set_neighbor_pos_size(uint32_t __ros_new_size)
  {
    this->neighbor_pos.resize(__ros_new_size);
  }
  inline uint32_t get_neighbor_pos_size() const { return neighbor_pos.size(); }
  uint32_t calc_neighbor_pos_array_serialization_len() const
  {
    uint32_t l = 0;
    uint32_t neighbor_pos_size = neighbor_pos.size();
    for (size_t i = 0; i < neighbor_pos_size; i++)
      l += neighbor_pos[i].serializationLength();
    return l;
  }
  inline void get_neighbor_pos_vec (std::vector<position_tracker::Position> &__ros_vec) const
  {
    __ros_vec = this->neighbor_pos;
  }
  inline void set_neighbor_pos_vec(const std::vector<position_tracker::Position> &__ros_vec)
  {
    this->neighbor_pos = __ros_vec;
  }
  inline uint32_t serializationLength() const
  {
    unsigned __l = 0;
    __l += cur_pos.serializationLength(); // cur_pos
    __l += 4 + calc_neighbor_pos_array_serialization_len(); // neighbor_pos
    return __l;
  }
  virtual uint8_t *serialize(uint8_t *write_ptr,
#if defined(__GNUC__)
                             __attribute__((unused)) uint32_t seq) const
#else
                             uint32_t seq) const
#endif
  {
    write_ptr = cur_pos.serialize(write_ptr, seq);
    uint32_t __neighbor_pos_size = neighbor_pos.size();
    SROS_SERIALIZE_PRIMITIVE(write_ptr, __neighbor_pos_size);
    for (size_t i = 0; i < __neighbor_pos_size; i++)
      write_ptr = neighbor_pos[i].serialize(write_ptr, seq);
    return write_ptr;
  }
  virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    read_ptr = cur_pos.deserialize(read_ptr);
    uint32_t __neighbor_pos_size;
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, __neighbor_pos_size);
    set_neighbor_pos_size(__neighbor_pos_size);
    for (size_t i = 0; i < __neighbor_pos_size; i++)
      read_ptr = neighbor_pos[i].deserialize(read_ptr);
    return read_ptr;
  }
};

typedef boost::shared_ptr<Request> RequestPtr;
typedef boost::shared_ptr<Request const> RequestConstPtr;

//! \htmlinclude Response.msg.html

class Response : public ros::Message
{
public:
  typedef boost::shared_ptr<Response> Ptr;
  typedef boost::shared_ptr<Response const> ConstPtr;

  typedef std::vector<position_tracker::Position> _avail_next_hops_type;

  std::vector<position_tracker::Position> avail_next_hops;

  Response() : ros::Message()
  {
  }
  Response(const Response &copy) : ros::Message()
  {
    (void)copy;
    avail_next_hops = copy.avail_next_hops;
  }
  Response &operator =(const Response &copy)
  {
    if (this == &copy)
      return *this;
    avail_next_hops.clear();
    avail_next_hops = copy.avail_next_hops;
    return *this;
  }
  virtual ~Response() 
  {
    avail_next_hops.clear();
  }
  inline static std::string __s_getDataType() { return std::string("path_generator/availableNextHopsResponse"); }
  inline static std::string __s_getMD5Sum() { return std::string(""); }
  inline static std::string __s_getMessageDefinition()
  {
    return std::string(
    "position_tracker/Position[] avail_next_hops\n"
    "\n"
    "================================================================================\n"
    "MSG: position_tracker/Position\n"
    "Header header\n"
    "float64 x\n"
    "float64 y\n"
    "float64 theta\n"
    "\n"
    "================================================================================\n"
    "MSG: roslib/Header\n"
    "# Standard metadata for higher-level stamped data types.\n"
    "# This is generally used to communicate timestamped data \n"
    "# in a particular coordinate frame.\n"
    "# \n"
    "# sequence ID: consecutively increasing ID \n"
    "uint32 seq\n"
    "#Two-integer timestamp that is expressed as:\n"
    "# * stamp.secs: seconds (stamp_secs) since epoch\n"
    "# * stamp.nsecs: nanoseconds since stamp_secs\n"
    "# time-handling sugar is provided by the client library\n"
    "time stamp\n"
    "#Frame this data is associated with\n"
    "# 0: no frame\n"
    "# 1: global frame\n"
    "string frame_id\n"
    "\n"
    "\n"
    );
  }
  inline virtual const std::string __getDataType() const { return __s_getDataType(); }
  inline virtual const std::string __getMD5Sum() const { return __s_getMD5Sum(); }
  inline virtual const std::string __getMessageDefinition() const { return __s_getMessageDefinition(); }
  inline static std::string __s_getServerMD5Sum() { return std::string("f5dedbcd134aa246c432cca1360aa1b2"); }
  inline virtual const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum(); }
  inline static std::string __s_getServiceDataType() { return std::string("path_generator/availableNextHops"); }
  inline virtual const std::string __getServiceDataType() const { return __s_getServiceDataType(); }
  void set_avail_next_hops_size(uint32_t __ros_new_size)
  {
    this->avail_next_hops.resize(__ros_new_size);
  }
  inline uint32_t get_avail_next_hops_size() const { return avail_next_hops.size(); }
  uint32_t calc_avail_next_hops_array_serialization_len() const
  {
    uint32_t l = 0;
    uint32_t avail_next_hops_size = avail_next_hops.size();
    for (size_t i = 0; i < avail_next_hops_size; i++)
      l += avail_next_hops[i].serializationLength();
    return l;
  }
  inline void get_avail_next_hops_vec (std::vector<position_tracker::Position> &__ros_vec) const
  {
    __ros_vec = this->avail_next_hops;
  }
  inline void set_avail_next_hops_vec(const std::vector<position_tracker::Position> &__ros_vec)
  {
    this->avail_next_hops = __ros_vec;
  }
  inline uint32_t serializationLength() const
  {
    unsigned __l = 0;
    __l += 4 + calc_avail_next_hops_array_serialization_len(); // avail_next_hops
    return __l;
  }
  virtual uint8_t *serialize(uint8_t *write_ptr,
#if defined(__GNUC__)
                             __attribute__((unused)) uint32_t seq) const
#else
                             uint32_t seq) const
#endif
  {
    uint32_t __avail_next_hops_size = avail_next_hops.size();
    SROS_SERIALIZE_PRIMITIVE(write_ptr, __avail_next_hops_size);
    for (size_t i = 0; i < __avail_next_hops_size; i++)
      write_ptr = avail_next_hops[i].serialize(write_ptr, seq);
    return write_ptr;
  }
  virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    uint32_t __avail_next_hops_size;
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, __avail_next_hops_size);
    set_avail_next_hops_size(__avail_next_hops_size);
    for (size_t i = 0; i < __avail_next_hops_size; i++)
      read_ptr = avail_next_hops[i].deserialize(read_ptr);
    return read_ptr;
  }
};

typedef boost::shared_ptr<Response> ResponsePtr;
typedef boost::shared_ptr<Response const> ResponseConstPtr;

Request request;
Response response;

};

}

#endif
