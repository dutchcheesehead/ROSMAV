#line 2 "src/cfgparser/oscan.c"

#line 4 "src/cfgparser/oscan.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  ) __attribute__((noreturn));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 86
#define YY_END_OF_BUFFER 87
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[754] =
    {   0,
        0,    0,   87,   85,   84,   83,   85,   85,   85,    2,
       13,   13,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,    3,    4,   83,    0,    5,
        0,    1,    0,   13,    0,    0,    0,    9,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   15,    0,    0,    0,    7,   13,    0,    0,
        9,    6,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   17,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   14,    0,    7,   13,    0,
        0,    0,    9,    0,    0,    0,    0,    0,    0,   22,
       23,    0,    0,   16,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   70,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   11,    0,
       12,    0,    7,    0,   13,    0,    0,    9,    9,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    7,    0,    0,
        0,    9,    9,    9,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   67,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   66,    0,    0,

        8,    0,    0,    0,    9,    9,    0,    9,    9,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   72,    0,   73,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       25,    0,   31,   32,    0,    0,    0,    0,    0,    0,
        0,   58,    0,   10,    8,    0,    0,    0,    9,    9,
        9,    9,    9,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   56,    0,    0,    0,    0,    0,    0,
        0,   30,   46,    0,    0,    0,    0,    0,    0,    0,

        0,   29,    0,    0,    8,    0,    0,    9,    9,    0,
        9,    9,    0,    9,    9,    0,    0,    0,    0,    0,
       41,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       26,    0,   20,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    9,    9,    9,    9,
        9,    9,    9,   28,    0,    0,   19,    0,    0,    0,
        0,    0,    0,   45,    0,    0,    0,    0,   40,    0,
       24,    0,    0,    0,   55,    0,    0,    0,    0,    0,
        0,    0,    0,   76,    0,    0,    0,    0,    0,    0,

        9,    9,    0,    9,    9,    0,    9,    9,    0,    9,
        9,    0,    0,   57,    0,    0,   80,    0,   43,   44,
        0,    0,    0,    0,    0,    0,   78,    0,   48,    0,
        0,    0,    0,    0,    0,   65,    0,    0,    0,   39,
        0,    0,    0,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    0,    0,    0,    0,    0,    0,    0,   68,
        0,    0,    0,    0,    0,    0,   53,    0,    0,    0,
        0,   59,   47,    0,    0,    0,    0,    9,    9,    0,
        9,    9,    0,    9,    9,    0,    9,    9,    0,    9,
        9,    0,    0,   74,    0,    0,   69,   71,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   34,
        0,    0,    0,    0,    0,   42,    0,    0,    0,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   18,
        0,   21,   33,    0,    0,    0,    0,    0,    0,   77,
        0,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    0,    0,   81,    0,    0,    0,    0,
        0,   54,   79,    0,    0,   35,    0,    0,    0,    0,
        0,    0,    9,    9,    9,    9,    9,    9,    9,    0,
        0,    0,   51,    0,    0,   49,    0,    0,    0,    0,

        0,    0,    0,    9,    9,    9,    9,    9,    9,    9,
       82,   75,   27,    0,    0,    0,    0,    0,    0,    0,
       63,    0,    0,   50,    0,    0,    0,    0,   64,   61,
        0,    0,    0,    0,    0,    0,   52,    0,    0,    0,
       60,    0,    0,    0,   37,   62,    0,   38,    0,    0,
        0,   36,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    7,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    8,    9,   10,   11,   11,
       11,   12,   11,   13,   11,   11,   11,   14,    1,    1,
        1,    1,    1,    1,   15,   16,   17,   18,   19,   20,
       21,   22,   23,    1,    1,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   36,   37,   38,   39,

       40,   41,   42,   43,   44,    1,   45,   46,   47,   48,
       49,   50,    1,   51,   52,   53,   54,   55,   56,   57,
       58,    1,   59,    1,   60,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[61] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    1,    3,
        3,    3,    3,    4,    3,    3,    3,    3,    3,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[872] =
    {   0,
        0,    0, 1029, 1030, 1030, 1030, 1025, 1021, 1023, 1030,
       53,   60, 1011,   61,   30,   31,   40,   55,   39,   54,
       46,   56,   72,  978,   47,  970,   52,   73,  970,   79,
       35,   74,  972,   84,  980, 1030, 1030, 1030, 1013, 1030,
     1015, 1030,  114,  121, 1003,  129,    0, 1030,  970,  962,
      974,  130,  997,  966,  975,  958,  957,  953,  954,  118,
      958,  103,   96,  103,  966,  953,  950,  949,  963,  948,
      971,  952,  117,  961,  958,  124,  943,  954,  949,  946,
      938,  147,  942,  986,  114,  936,  152,  160,  161,  973,
        0,    0,  937,  936,  948,  168,  958,  936,  166,  928,

      927,  168,  939,  962,  937,  959,  930,  935,  928,  924,
      954,  123,  938,  929,  951,  935, 1030,  949,  914,  928,
      917,  911,  925,  909,  936,  910,  917,  920,  921,  161,
      912,  907,  903,  176,  911, 1030,  181,  191,  197,  936,
      935,  934,  933,  890,  927,  893,  901,  902,  892, 1030,
     1030,  892,  903, 1030,  154,  188,  189,  887,  886,  885,
      886,  905,  905,  912,  908,  881,  881,  892,  910, 1030,
      877,  882,  881,  895,  871,  870,  871,  882,  865,  867,
      863,  876,  868,  877,  854,  867,  867,  865, 1030,  163,
     1030,  213,  219,  185,  225,  894,  893,    0,  892,    0,

      879,  864,  872,  878,  848,  125,  847,  853,  860,  854,
      842,  844,  840,  842,  851,  842,  838,  841,  834,  841,
      842,  835,  836,  830,  836,  847,  825,  828,  836,  828,
      840,  839,  821,  827,  851,  841,  830,  815,  824,  821,
      814,  821,  811,  815,  816,  229,  235,  239,  847,  846,
      845,  844,  843,  842,  806,  801,  815,  812,  800,  802,
      813,  808,  803,  810,  794,  798,  805,  796,  803,  804,
      803,  794,  789,  800,  781,  788, 1030,  785,  792,  787,
      798,  789,  788,  775,  775,  778,  771,  774,  782,  785,
      771,  768,  770,  778,  762,  762,  761, 1030,  771,  759,

      243,  803,  796,  795,    0,  794,    0,  793,  792,    0,
      782,  764,  752,  747,  757,  747,  753,  747,  758,  750,
      194,  742, 1030,  741, 1030,  755,  753,  742,  750,  743,
      746,  747,  746,  734,  745,  739,  731,  729,  752,  726,
     1030,  738, 1030,  239,  724,  722,  720,  735,  729,  732,
      731, 1030,  722, 1030,  248,  755,  754,  753,  752,  751,
      750,  749,  748,  713,  722,  719,  718,  719,  716,  711,
      699,  709,  708,  707,  701,  705,  704,  707,  708,  697,
      706,  699,  698, 1030,  703,  685,  695,  691,  701,  693,
      686, 1030, 1030,  694,  682,  678,  691,  677,  693,  692,

      674, 1030,  675,  685, 1030,  710,  709,    0,  708,    0,
      707,  706,    0,  705,  704,    0,  664,  663,  675,  668,
     1030,  662,  673,  675,  657,  661,  666,  651,  668,  667,
      686,  667, 1030,  649,  648,  652,  646,  662,  644,  656,
      653,  645,  647,  651,  647,  642,  633,  648,  641,  638,
      627,  644,  631,  668,  667,  666,  665,  664,  663,  662,
      661,  660,  659, 1030,  655,  623, 1030,  615,  625,  622,
      609,  624,  622, 1030,  628,  627,  622,  609, 1030,  602,
     1030,  615,  612,  599, 1030,  616,  609,  608,  617,  603,
      603,  614,  597, 1030,  610,  615,  594,  593,  630,  629,

        0,  628,    0,  627,  626,    0,  625,  624,    0,  623,
      622,    0,  592, 1030,  598,  580, 1030,  600, 1030, 1030,
      579,  578,  588,  575,  248,  578, 1030,  594, 1030,  586,
      601,  569,  571,  581,  562, 1030,  561,  574,  573, 1030,
      602,  601,  600,  599,  598,  597,  596,  595,  594,  593,
      592,  591,  568,  557,  544,  557,  547,  546,  562, 1030,
      220,  553,  556,  541,  546,  549, 1030,  544,  545,  546,
      543,  249, 1030,  541,  535,  572,  571,    0,  570,    0,
      569,  568,    0,  567,  566,    0,  565,  564,    0,  563,
      562,    0,  527, 1030,  542,  526, 1030, 1030,  518,  527,

      528,  517,  513,  521,  514,  518,  511,  510,  509,  533,
      514,  508,  508,  507,  516, 1030,  541,  540,  539,    0,
      538,    0,  537,    0,  536,    0,  535,    0,  534,    0,
      505,  502,  505,  498,  495,  493,  498,  500,  486, 1030,
      498, 1030,  242,  479,  485,  489,  494,  493,  486, 1030,
      517,    0,    0,   48,    0,   69,    0,   84,    0,   99,
        0,  136,    0,  166,  168, 1030,  175,  192,  193,  246,
      228, 1030, 1030,  229,  225, 1030,  234,  230,  240,  243,
      240,  271,    0,    0,    0,    0,    0,    0,    0,  234,
      247,  236, 1030,  245,  232, 1030,  239,  248,  244,  238,

      251,  257,  249,    0, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030,  245,  259,  249,  252,  251,  277,  247,
     1030,  260,  263, 1030,  279,  257,  265,  295, 1030,  285,
      265,  262,  270,  262,  284,  302, 1030,  274,  266,  262,
     1030,  289,  273,  265, 1030, 1030,  273, 1030,  281,  273,
      269, 1030, 1030,  327,  332,  336,  340,  342,  344,  346,
      348,  350,  351,  353,  355,  357,  359,  361,  362,  364,
      365,  367,  369,  371,  373,  375,  377,  379,  380,  382,
      383,  385,  386,  388,  390,  392,  394,  396,  398,  400,
      402,  404,  405,  407,  408,  410,  411,  413,  414,  416,

      418,  420,  422,  424,  426,  428,  430,  432,  434,  436,
      437,  439,  440,  442,  443,  445,  446,  448,  449,  451,
      453,  455,  457,  459,  461,  463,  465,  467,  469,  471,
      473,  475,  476,  478,  479,  481,  482,  484,  485,  487,
      488,  490,  491,  493,  495,  496,  498,  499,  501,  502,
      504,  505,  507,  508,  510,  511,  513,  514,  515,  516,
      517,  518,  519,  520,  521,  522,  523,  524,  525,  526,
      527
    } ;

static yyconst flex_int16_t yy_def[872] =
    {   0,
      753,    1,  753,  753,  753,  753,  753,  754,  755,  753,
      756,  756,  753,  756,   14,   14,   14,   14,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
       14,   14,  753,  753,  753,  753,  753,  753,  754,  753,
      755,  753,  753,  757,  758,  757,  759,  753,  753,  753,
      753,  757,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  757,  753,  755,  753,  753,  753,  760,  760,  761,
      762,  759,  753,  753,  753,  760,  753,  753,  753,  753,

      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  760,  753,  753,  753,  753,  753,  753,
      763,  764,  765,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  766,  767,  768,  769,  770,

      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  771,
      772,  773,  774,  775,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,

      753,  753,  776,  777,  778,  779,  780,  753,  781,  782,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  783,  784,  785,  786,
      787,  788,  789,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,

      753,  753,  753,  753,  753,  790,  791,  792,  793,  794,
      753,  795,  796,  753,  797,  798,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  799,  800,  801,  802,  803,  804,
      805,  806,  807,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  808,  809,

      810,  811,  812,  753,  813,  814,  753,  815,  816,  753,
      817,  818,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  819,  820,  821,  822,  823,  824,  825,  826,  827,
      828,  829,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  830,  831,  832,  833,  834,
      753,  835,  836,  753,  837,  838,  753,  839,  840,  753,
      841,  842,  753,  753,  753,  753,  753,  753,  753,  753,

      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  843,  844,  845,
      846,  847,  848,  849,  850,  851,  852,  853,  854,  855,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      856,  857,  858,  753,  859,  753,  860,  753,  861,  753,
      862,  753,  863,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  864,  865,  866,  867,  868,  869,  870,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,

      753,  753,  753,  871,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,    0,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,

      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753
    } ;

static yyconst flex_int16_t yy_nxt[1091] =
    {   0,
        4,    5,    6,    7,    5,    8,    9,    4,   10,   11,
       12,   12,   12,   13,   14,   15,   16,   17,   15,   18,
        4,   19,   20,   21,   22,   23,   24,   25,    4,   26,
       27,   28,   29,    4,   30,   31,   15,   15,   32,   15,
       15,    4,    4,    4,    4,    4,    4,   33,    4,    4,
        4,   34,    4,    4,    4,    4,    4,   35,   36,   37,
       43,  580,   44,   44,   44,   44,   45,   43,  753,   44,
       44,   44,   44,   45,   45,  753,   51,   53,   54,   52,
      753,   58,  583,  753,  753,  753,   55,   56,   81,   61,
       84,   63,   71,  753,   62,   72,   57,  586,   74,   64,

      753,   59,   75,   60,   65,   66,   49,   67,  753,   47,
       76,   68,  589,   82,   50,   69,  753,  753,   79,  753,
       84,   77,   80,   87,   87,   87,   87,  753,   43,  104,
       88,   88,   88,   88,   45,   85,  753,  753,  108,  110,
      109,  112,   45,   45,  122,  167,  126,  260,  123,  592,
      113,  105,  111,  127,  753,  106,  168,  128,  261,  137,
       45,  138,  138,  138,  138,   85,   96,   43,  753,  139,
      139,  139,  139,   45,   45,  753,   45,  150,  151,  156,
      157,   45,  185,  753,  209,  210,  186,  134,  152,   45,
      192,  192,  192,  192,  248,  248,  248,  248,  137,  153,

      193,  193,  193,  193,  194,  690,  195,  195,  195,  195,
       45,  190,  211,  213,  691,  374,  245,  375,  212,  214,
      246,  147,  247,  247,  247,  247,  137,  692,  248,  248,
      248,  248,  194,  693,  195,  195,  195,  195,  301,  301,
      301,  301,  246,  694,  302,  302,  302,  302,  248,  248,
      248,  248,  355,  355,  355,  355,  394,  405,  405,  405,
      405,  600,  561,  611,  695,  601,  395,  562,  674,  675,
      396,  563,  564,  696,  697,  698,  612,  699,  700,  613,
      701,  614,  702,  703,  619,  711,  712,  713,  714,  715,
      716,  717,  718,  719,  720,  721,  722,  723,  724,  725,

      726,  727,  728,  729,  730,  731,  732,  733,  734,  735,
      736,  737,  738,  739,  740,  741,  742,  743,  744,  745,
      746,  747,  748,  749,  750,  751,  752,   39,   39,   39,
       39,   39,   41,   41,   41,   41,   41,   46,   46,   46,
       46,   89,   89,   89,   90,   90,   92,  140,  140,  140,
      141,  141,  143,  196,  196,  197,  197,  199,  199,  249,
      249,  250,  250,  252,  253,  253,  254,  303,  303,  304,
      304,  306,  306,  308,  308,  309,  309,  356,  356,  357,
      357,  359,  360,  360,  361,  362,  362,  363,  406,  406,
      407,  407,  409,  409,  411,  411,  412,  412,  414,  414,

      415,  415,  454,  454,  455,  455,  457,  458,  458,  459,
      460,  460,  461,  462,  462,  463,  499,  499,  500,  500,
      502,  502,  504,  504,  505,  505,  507,  507,  508,  508,
      510,  510,  511,  511,  541,  541,  542,  542,  544,  545,
      545,  546,  547,  547,  548,  549,  549,  550,  551,  551,
      552,  576,  576,  577,  577,  579,  579,  581,  581,  582,
      582,  584,  584,  585,  585,  587,  587,  588,  588,  590,
      590,  591,  591,  617,  617,  618,  618,  620,  621,  621,
      622,  623,  623,  624,  625,  625,  626,  627,  627,  628,
      629,  629,  630,  651,  651,  652,  652,  653,  654,  654,

      655,  656,  656,  657,  658,  658,  659,  660,  660,  661,
      662,  662,  663,  682,  682,  683,  684,  685,  686,  687,
      688,  689,  704,  705,  706,  707,  708,  709,  710,   48,
      619,  681,  680,  679,  678,  677,  676,  673,  672,  671,
      670,  669,  668,  667,  666,  665,  664,  592,  589,  586,
      583,  580,   48,  619,  543,  650,  649,  648,  647,  646,
      645,  644,  643,  642,  641,  640,  639,  638,  637,  636,
      635,  634,  633,  632,  631,  592,  512,  589,  509,  586,
      506,  583,  503,  580,  619,  543,  616,  615,  610,  609,
      608,  607,  606,  605,  604,  603,  602,  599,  598,  597,

      596,  595,  594,  593,  592,  512,  589,  509,  586,  506,
      583,  503,  580,  578,  543,  456,  575,  574,  573,  572,
      571,  570,  569,  568,  567,  566,  565,  560,  559,  558,
      557,  556,  555,  554,  553,  512,  416,  509,  413,  506,
      410,  503,  543,  456,  540,  539,  538,  537,  536,  535,
      534,  533,  532,  531,  530,  529,  528,  527,  526,  525,
      524,  523,  522,  521,  520,  519,  518,  517,  516,  515,
      514,  513,  512,  416,  509,  413,  506,  410,  503,  501,
      456,  358,  498,  497,  496,  495,  494,  493,  492,  491,
      490,  489,  488,  487,  486,  485,  484,  483,  482,  481,

      480,  479,  478,  477,  476,  475,  474,  473,  472,  471,
      470,  469,  468,  467,  466,  465,  464,  416,  310,  413,
      307,  410,  456,  358,  453,  452,  451,  450,  449,  448,
      447,  446,  445,  444,  443,  442,  441,  440,  439,  438,
      437,  436,  435,  434,  433,  432,  431,  430,  429,  428,
      427,  426,  425,  424,  423,  422,  421,  420,  419,  418,
      417,  416,  310,  413,  307,  410,  408,  358,  251,  404,
      403,  402,  401,  400,  399,  398,  397,  393,  392,  391,
      390,  389,  388,  387,  386,  385,  384,  383,  382,  381,
      380,  379,  378,  377,  376,  373,  372,  371,  370,  369,

      368,  367,  366,  365,  364,  310,  200,  307,  358,  251,
      246,  354,  353,  352,  351,  350,  349,  348,  347,  346,
      345,  344,  343,  342,  341,  340,  339,  338,  337,  336,
      335,  334,  333,  332,  331,  330,  329,  328,  327,  326,
      325,  324,  323,  322,  321,  320,  319,  318,  317,  316,
      315,  314,  313,  312,  311,  310,  200,  307,  305,  251,
      142,  300,  299,  298,  297,  296,  295,  294,  293,  292,
      291,  290,  289,  288,  287,  286,  285,  284,  283,  282,
      281,  280,  279,  278,  277,  276,  275,  274,  273,  272,
      271,  270,  269,  268,  267,  266,  265,  264,  263,  262,

      259,  258,  257,  256,  255,  200,  251,  142,  244,  243,
      242,  241,  240,  239,  238,  237,  236,  235,  234,  233,
      232,  231,  230,  229,  228,  227,  226,  225,  224,  223,
      222,  221,  220,  219,  218,  217,  216,  215,  208,  207,
      206,  205,  204,  203,  202,  201,  200,  198,  142,   45,
      191,  189,  188,  187,  184,  183,  182,  181,  180,  179,
      178,  177,  176,  175,  174,  173,  172,  171,  170,  169,
      166,  165,  164,  163,  162,  161,  160,  159,  158,  155,
      154,  149,  148,  146,  145,  144,  142,  136,   42,  135,
      133,  132,  131,  130,  129,  125,  124,  121,  120,  119,

      118,  117,  116,  115,  114,  107,  103,  102,  101,  100,
       99,   98,   97,   95,   94,   93,   91,   42,   40,   86,
       83,   78,   73,   70,   48,   42,   40,   38,  753,    3,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753
    } ;

static yyconst flex_int16_t yy_chk[1091] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       11,  654,   11,   11,   11,   11,   11,   12,   14,   12,
       12,   12,   12,   12,   14,   15,   16,   18,   19,   17,
       31,   20,  656,   15,   16,   17,   19,   19,   31,   21,
       34,   22,   25,   17,   21,   25,   19,  658,   27,   22,

       18,   20,   27,   20,   22,   22,   14,   23,   18,   11,
       28,   23,  660,   32,   14,   23,   12,   14,   30,   32,
       85,   28,   30,   43,   43,   43,   43,   32,   44,   60,
       44,   44,   44,   44,   44,   34,   46,   52,   62,   63,
       62,   64,   46,   52,   73,  112,   76,  206,   73,  662,
       64,   60,   63,   76,   82,   60,  112,   76,  206,   87,
       82,   87,   87,   87,   87,   85,   52,   88,   89,   88,
       88,   88,   88,   88,   89,   96,  190,   99,   99,  102,
      102,   96,  130,  134,  155,  155,  130,   82,   99,  134,
      137,  137,  137,  137,  194,  194,  194,  194,  138,   99,

      138,  138,  138,  138,  139,  664,  139,  139,  139,  139,
      139,  134,  156,  157,  665,  321,  190,  321,  156,  157,
      192,   96,  192,  192,  192,  192,  193,  667,  193,  193,
      193,  193,  195,  668,  195,  195,  195,  195,  246,  246,
      246,  246,  247,  669,  247,  247,  247,  247,  248,  248,
      248,  248,  301,  301,  301,  301,  344,  355,  355,  355,
      355,  561,  525,  572,  670,  561,  344,  525,  643,  643,
      344,  525,  525,  671,  674,  675,  572,  677,  678,  572,
      679,  572,  680,  681,  682,  690,  691,  692,  694,  695,
      697,  698,  699,  700,  701,  702,  703,  714,  715,  716,

      717,  718,  719,  720,  722,  723,  725,  726,  727,  728,
      730,  731,  732,  733,  734,  735,  736,  738,  739,  740,
      742,  743,  744,  747,  749,  750,  751,  754,  754,  754,
      754,  754,  755,  755,  755,  755,  755,  756,  756,  756,
      756,  757,  757,  757,  758,  758,  759,  760,  760,  760,
      761,  761,  762,  763,  763,  764,  764,  765,  765,  766,
      766,  767,  767,  768,  769,  769,  770,  771,  771,  772,
      772,  773,  773,  774,  774,  775,  775,  776,  776,  777,
      777,  778,  779,  779,  780,  781,  781,  782,  783,  783,
      784,  784,  785,  785,  786,  786,  787,  787,  788,  788,

      789,  789,  790,  790,  791,  791,  792,  793,  793,  794,
      795,  795,  796,  797,  797,  798,  799,  799,  800,  800,
      801,  801,  802,  802,  803,  803,  804,  804,  805,  805,
      806,  806,  807,  807,  808,  808,  809,  809,  810,  811,
      811,  812,  813,  813,  814,  815,  815,  816,  817,  817,
      818,  819,  819,  820,  820,  821,  821,  822,  822,  823,
      823,  824,  824,  825,  825,  826,  826,  827,  827,  828,
      828,  829,  829,  830,  830,  831,  831,  832,  833,  833,
      834,  835,  835,  836,  837,  837,  838,  839,  839,  840,
      841,  841,  842,  843,  843,  844,  844,  845,  846,  846,

      847,  848,  848,  849,  850,  850,  851,  852,  852,  853,
      854,  854,  855,  856,  856,  857,  858,  859,  860,  861,
      862,  863,  864,  865,  866,  867,  868,  869,  870,  871,
      651,  649,  648,  647,  646,  645,  644,  641,  639,  638,
      637,  636,  635,  634,  633,  632,  631,  629,  627,  625,
      623,  621,  619,  618,  617,  615,  614,  613,  612,  611,
      610,  609,  608,  607,  606,  605,  604,  603,  602,  601,
      600,  599,  596,  595,  593,  591,  590,  588,  587,  585,
      584,  582,  581,  579,  577,  576,  575,  574,  571,  570,
      569,  568,  566,  565,  564,  563,  562,  559,  558,  557,

      556,  555,  554,  553,  552,  551,  550,  549,  548,  547,
      546,  545,  544,  543,  542,  541,  539,  538,  537,  535,
      534,  533,  532,  531,  530,  528,  526,  524,  523,  522,
      521,  518,  516,  515,  513,  511,  510,  508,  507,  505,
      504,  502,  500,  499,  498,  497,  496,  495,  493,  492,
      491,  490,  489,  488,  487,  486,  484,  483,  482,  480,
      478,  477,  476,  475,  473,  472,  471,  470,  469,  468,
      466,  465,  463,  462,  461,  460,  459,  458,  457,  456,
      455,  454,  453,  452,  451,  450,  449,  448,  447,  446,
      445,  444,  443,  442,  441,  440,  439,  438,  437,  436,

      435,  434,  432,  431,  430,  429,  428,  427,  426,  425,
      424,  423,  422,  420,  419,  418,  417,  415,  414,  412,
      411,  409,  407,  406,  404,  403,  401,  400,  399,  398,
      397,  396,  395,  394,  391,  390,  389,  388,  387,  386,
      385,  383,  382,  381,  380,  379,  378,  377,  376,  375,
      374,  373,  372,  371,  370,  369,  368,  367,  366,  365,
      364,  363,  362,  361,  360,  359,  358,  357,  356,  353,
      351,  350,  349,  348,  347,  346,  345,  342,  340,  339,
      338,  337,  336,  335,  334,  333,  332,  331,  330,  329,
      328,  327,  326,  324,  322,  320,  319,  318,  317,  316,

      315,  314,  313,  312,  311,  309,  308,  306,  304,  303,
      302,  300,  299,  297,  296,  295,  294,  293,  292,  291,
      290,  289,  288,  287,  286,  285,  284,  283,  282,  281,
      280,  279,  278,  276,  275,  274,  273,  272,  271,  270,
      269,  268,  267,  266,  265,  264,  263,  262,  261,  260,
      259,  258,  257,  256,  255,  254,  253,  252,  251,  250,
      249,  245,  244,  243,  242,  241,  240,  239,  238,  237,
      236,  235,  234,  233,  232,  231,  230,  229,  228,  227,
      226,  225,  224,  223,  222,  221,  220,  219,  218,  217,
      216,  215,  214,  213,  212,  211,  210,  209,  208,  207,

      205,  204,  203,  202,  201,  199,  197,  196,  188,  187,
      186,  185,  184,  183,  182,  181,  180,  179,  178,  177,
      176,  175,  174,  173,  172,  171,  169,  168,  167,  166,
      165,  164,  163,  162,  161,  160,  159,  158,  153,  152,
      149,  148,  147,  146,  145,  144,  143,  142,  141,  140,
      135,  133,  132,  131,  129,  128,  127,  126,  125,  124,
      123,  122,  121,  120,  119,  118,  116,  115,  114,  113,
      111,  110,  109,  108,  107,  106,  105,  104,  103,  101,
      100,   98,   97,   95,   94,   93,   90,   86,   84,   83,
       81,   80,   79,   78,   77,   75,   74,   72,   71,   70,

       69,   68,   67,   66,   65,   61,   59,   58,   57,   56,
       55,   54,   53,   51,   50,   49,   45,   41,   39,   35,
       33,   29,   26,   24,   13,    9,    8,    7,    3,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "src/cfgparser/oscan.lex"
#line 2 "src/cfgparser/oscan.lex"

/*
 * The olsr.org Optimized Link-State Routing daemon(olsrd)
 * Copyright (c) 2004, Andreas Tonnesen(andreto@olsr.org)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met:
 *
 * * Redistributions of source code must retain the above copyright 
 *   notice, this list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright 
 *   notice, this list of conditions and the following disclaimer in 
 *   the documentation and/or other materials provided with the 
 *   distribution.
 * * Neither the name of olsr.org, olsrd nor the names of its 
 *   contributors may be used to endorse or promote products derived 
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Visit http://www.olsr.org for more information.
 *
 * If you find this software useful feel free to make a donation
 * to the project. For more information see the website or contact
 * the copyright holders.
 *
 */


#define YYSTYPE struct conf_token *

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#include "olsrd_conf.h"

#include "oparse.h"
 
#define ECHO if(fwrite( yytext, yyleng, 1, yyout )) {}

/* Prototypes */
int yyget_lineno(void);
FILE * yyget_in(void);
FILE* yyget_out(void);
char *yyget_text(void);
void yyset_lineno(int);
void yyset_in(FILE *);
void yyset_out(FILE *);
int yyget_debug(void);
void yyset_debug(int);
int yylex_destroy(void);
int yylex(void);

static struct conf_token *get_conf_token(void);
static struct conf_token *get_string_token(const char * const s, const size_t n);
static struct conf_token *get_integer_token(const char * const s);
static struct conf_token *get_floating_token(const char * const s);
static struct conf_token *get_boolean_token(const bool b);

static struct conf_token *get_conf_token(void)
{
    struct conf_token *t = calloc(1, sizeof(struct conf_token));
    if (t == NULL) {
        fprintf(stderr, "Cannot allocate %d bytes for an configuration token.\n", (int)sizeof(struct conf_token));
    }
    return t;
}

static struct conf_token *get_string_token(const char * const s, const size_t n)
{
    struct conf_token *rv = get_conf_token();
    if (rv != NULL) {
        rv->string = malloc(n + 1);
        if (rv->string == NULL) {
          fprintf(stderr, "Cannot allocate %lu bytes for string token data.\n", (unsigned long)(n+1)); /* size_t on 64bit */
            free(rv);
            return NULL;
        }
        memcpy(rv->string, s, n);
        rv->string[n] = '\0';
    }
    return rv;
}

static struct conf_token *get_integer_token(const char * const s)
{
    struct conf_token *rv = get_conf_token();
    if (rv != NULL) {
        rv->integer = strtol(s, NULL, 0);
    }
    return rv;
}

static struct conf_token *get_floating_token(const char * const s)
{
    struct conf_token *rv = get_conf_token();
    if (rv != NULL) {
	rv->floating = 0.0;
	sscanf(s, "%f", &rv->floating);
    }
    return rv;
}

static struct conf_token *get_boolean_token(const bool b)
{
    struct conf_token *rv = get_conf_token();
    if (rv != NULL) {
        rv->boolean = b;
    }
    return rv;
}

#line 1106 "src/cfgparser/oscan.c"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
#line 161 "src/cfgparser/oscan.lex"


#line 1296 "src/cfgparser/oscan.c"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 754 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 753 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 163 "src/cfgparser/oscan.lex"
{
    current_line++;
    return TOK_COMMENT;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 168 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_SLASH;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 173 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_OPEN;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 178 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_CLOSE;
}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 183 "src/cfgparser/oscan.lex"
{
    yylval = get_string_token(yytext + 1, yyleng - 2);
    if (yylval == NULL) {
        yyterminate();
    }
    return TOK_STRING;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 191 "src/cfgparser/oscan.lex"
{
    yylval = get_integer_token(yytext);
    return TOK_INTEGER;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 196 "src/cfgparser/oscan.lex"
{
    yylval = get_floating_token(yytext);
    return TOK_FLOAT;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 201 "src/cfgparser/oscan.lex"
{
    yylval = get_string_token(yytext, yyleng + 1);
    if (yylval == NULL) {
        yyterminate();
    }
    return TOK_IPV4_ADDR;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 208 "src/cfgparser/oscan.lex"
{
    yylval = get_string_token(yytext, yyleng + 1);
    if (yylval == NULL) {
        yyterminate();
    }
    return TOK_IPV6_ADDR;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 216 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_DEFAULT;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 221 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_AUTO;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 226 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_NONE;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 231 "src/cfgparser/oscan.lex"
{
    yylval = get_integer_token(yytext);
    return TOK_INTEGER;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 237 "src/cfgparser/oscan.lex"
{
    yylval = get_boolean_token(true);
    return TOK_BOOLEAN;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 242 "src/cfgparser/oscan.lex"
{
    yylval = get_boolean_token(false);
    return TOK_BOOLEAN;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 247 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_HOSTLABEL;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 252 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_NETLABEL;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 257 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_MAXIPC;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 262 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_DEBUGLEVEL;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 267 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_IPVERSION;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 272 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_NICCHGSPOLLRT;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 277 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_HNA4;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 282 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_HNA6;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 287 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_PLUGIN;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 292 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_PLPARAM;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 297 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_INTERFACE;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 301 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_INTERFACE_DEFAULTS;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 306 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_NOINT;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 311 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_TOS;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 317 "src/cfgparser/oscan.lex"
{
  yylval = NULL;
  return TOK_OLSRPORT;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 322 "src/cfgparser/oscan.lex"
{
  yylval = NULL;
  return TOK_RTPROTO;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 327 "src/cfgparser/oscan.lex"
{
  yylval = NULL;
  return TOK_RTTABLE;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 332 "src/cfgparser/oscan.lex"
{
  yylval = NULL;
  return TOK_RTTABLE_DEFAULT;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 337 "src/cfgparser/oscan.lex"
{
  yylval = NULL;
  return TOK_RTTABLE_TUNNEL;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 342 "src/cfgparser/oscan.lex"
{
  yylval = NULL;
  return TOK_RTTABLE_PRIORITY;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 347 "src/cfgparser/oscan.lex"
{
  yylval = NULL;
  return TOK_RTTABLE_DEFAULTOLSR_PRIORITY;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 352 "src/cfgparser/oscan.lex"
{
  yylval = NULL;
  return TOK_RTTABLE_TUNNEL_PRIORITY;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 357 "src/cfgparser/oscan.lex"
{
  yylval = NULL;
  return TOK_RTTABLE_DEFAULT_PRIORITY;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 362 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_WILLINGNESS;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 367 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_IPCCON;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 372 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_FIBMETRIC;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 377 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_USEHYST;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 382 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_HYSTSCALE;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 387 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_HYSTUPPER;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 392 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_HYSTLOWER;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 397 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_POLLRATE;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 403 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_TCREDUNDANCY;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 408 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_MPRCOVERAGE;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 413 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_LQ_LEVEL;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 418 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_LQ_FISH;
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 423 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_LQ_AGING;
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 428 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_LQ_PLUGIN;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 433 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_LQ_NAT_THRESH;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 438 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_LQ_MULT;
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 443 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_MIN_TC_VTIME;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 448 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_LOCK_FILE;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 453 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_CLEAR_SCREEN;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 458 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_USE_NIIT;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 463 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_SMART_GW;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 468 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_SMART_GW_ALLOW_NAT;
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 473 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_SMART_GW_UPLINK;
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 478 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_SMART_GW_UPLINK_NAT;
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 483 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_SMART_GW_SPEED;
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 488 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_SMART_GW_PREFIX;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 493 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_SRC_IP_ROUTES;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 497 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_IFWEIGHT;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 501 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_MAIN_IP;
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 505 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_IPV4BROADCAST;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 509 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_IPV4MULTICAST;
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 513 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_IFMODE;
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 517 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_IPV6MULTICAST;
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 521 "src/cfgparser/oscan.lex"
{
		yylval = NULL;
		return TOK_IPV4SRC;
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 525 "src/cfgparser/oscan.lex"
{
		yylval = NULL;
		return TOK_IPV6SRC;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 529 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_HELLOINT;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 533 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_HELLOVAL;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 537 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_TCINT;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 541 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_TCVAL;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 545 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_MIDINT;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 549 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_MIDVAL;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 553 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_HNAINT;
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 557 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_HNAVAL;
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 561 "src/cfgparser/oscan.lex"
{
    yylval = NULL;
    return TOK_AUTODETCHG;
}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 567 "src/cfgparser/oscan.lex"
{
    current_line++;
}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 571 "src/cfgparser/oscan.lex"

	YY_BREAK
case 85:
YY_RULE_SETUP
#line 573 "src/cfgparser/oscan.lex"
{
  /* Do nothing */
  //fprintf(stderr, "Failed to parse line %d of configuration file.\n",
  //      current_line);
  //yyterminate();
  //yy_fatal_error("Parsing failed.\n");

  /* To avoid compiler warning (stupid...) */
  if(0)
    yyunput(0, NULL);
}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 585 "src/cfgparser/oscan.lex"
ECHO;
	YY_BREAK
#line 2075 "src/cfgparser/oscan.c"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 754 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 754 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 753);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 585 "src/cfgparser/oscan.lex"



